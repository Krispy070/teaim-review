I saw the Replit note: links sometimes navigate to /projects/undefined/... and the UI only updates after a manual refresh. That’s classic “projectId isn’t available in this component at click time” + “no guard to recover from a missing param.” Let’s ship a small, surgical Next Big Build v2.6.7 (navigation stability) that makes Brand v2 feel rock solid.

This push fixes the nav bug and adds a clean project switch flow:

ProjectId Resolver (params → context → persisted → fallback)

ProjectGuard wrapper (auto-redirects if projectId is missing)

Project Select page (pick any project; persists)

SidebarV2 now always builds valid links (no undefined)

Header + Pages call the resolver — no more refresh-only nav

It’s all drop-in and Brand v2–aware.

1) ProjectId utilities (resolve + persist)

We already use usePersistProjectId and getPersistedProjectId elsewhere. Add a single resolver:

client/src/lib/projectId.ts (new)

import { getPersistedProjectId } from "@/lib/projectCtx";

export function resolveProjectId(paramsPid?: string, ctxPid?: string): string | null {
  // Priority: URL → context → persisted
  if (paramsPid && paramsPid !== "undefined" && paramsPid !== ":projectId") return paramsPid;
  if (ctxPid && ctxPid !== "undefined") return ctxPid;
  const stored = getPersistedProjectId();
  return stored && stored !== "undefined" ? stored : null;
}


(We won’t write context wiring here to keep it minimal; the resolver can take a context pid if you have one.)

2) ProjectGuard (auto-fix undefined → redirect / select)

client/src/components/ProjectGuard.tsx (new)

import { useEffect } from "react";
import { useNavigate, useParams, useLocation } from "react-router-dom";
import { resolveProjectId } from "@/lib/projectId";
import { getPersistedProjectId } from "@/lib/projectCtx";

export default function ProjectGuard({ children }: { children: any }) {
  const params = useParams();
  const navigate = useNavigate();
  const loc = useLocation();
  const pid = resolveProjectId(params.projectId, undefined);

  useEffect(() => {
    // If route has :projectId but it's missing or "undefined", repair it.
    const hasProjectSlot = loc.pathname.includes("/projects/");
    if (hasProjectSlot && (!pid || pid === "undefined")) {
      const stored = getPersistedProjectId();
      if (stored) {
        // rewrite current path to include stored pid
        const fixed = loc.pathname.replace("/projects/undefined", `/projects/${stored}`);
        navigate(fixed, { replace: true });
      } else {
        navigate("/projects/select", { replace: true });
      }
    }
  // eslint-disable-next-line
  }, [loc.pathname]);

  return children;
}


Wrap all project routes with this guard so stale/empty IDs self-heal. (You can wrap at the layout level.)

3) Project Select page (safe fallback)

client/src/pages/ProjectSelect.tsx (new)

import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getJSON } from "@/lib/authFetch";
import { usePersistProjectId } from "@/lib/projectCtx";

type Proj = { id:string; code?:string; name?:string };

export default function ProjectSelect(){
  const [list,setList]=useState<Proj[]>([]);
  const [loading,setLoading]=useState(true);
  const navigate = useNavigate();

  useEffect(()=>{ (async()=>{
    setLoading(true);
    try{
      // If you have a projects list endpoint, great; otherwise show a helpful message for dev
      const d = await getJSON(`/api/projects/list`); // replace with your actual endpoint if different
      setList(d.items || []);
    }catch{
      setList([]);
    }
    setLoading(false);
  })(); },[]);

  function pick(p:Proj){
    // persist & go to dashboard
    try { localStorage.setItem("kap.projectId", p.id); } catch {}
    navigate(`/projects/${p.id}/dashboard`, { replace:true });
  }

  return (
    <div className="p-6 max-w-xl mx-auto space-y-3">
      <h1 className="text-xl font-semibold">Select a Project</h1>
      {loading && <div>Loading…</div>}
      {!loading && list.length===0 && (
        <div className="text-sm text-muted-foreground">
          No projects found. In dev, create one in the admin area or seed a demo project.
        </div>
      )}
      <div className="space-y-2">
        {list.map(p=>(
          <button key={p.id} className="brand-btn w-full text-left" onClick={()=>pick(p)}>
            <div className="text-sm font-medium">{p.code || p.name || p.id.slice(0,8)}</div>
            <div className="text-xs text-muted-foreground">{p.id}</div>
          </button>
        ))}
      </div>
    </div>
  );
}


If you don’t have /api/projects/list, add the quick backend below (Section 5) or temporarily set a single project id into kap.projectId in DevTools and navigate.

4) SidebarV2 — always build valid links

Patch client/src/components/SidebarV2.tsx — use resolver + fallback

import { NavLink, useParams } from "react-router-dom";
import { resolveProjectId } from "@/lib/projectId";
import { getPersistedProjectId } from "@/lib/projectCtx";
// …imports…

export default function SidebarV2(){
  const params = useParams();
  const pid = resolveProjectId(params.projectId, undefined) || getPersistedProjectId();

  const p = (path:string) => pid ? `/projects/${pid}/${path}` : "/projects/select";

  return (
    <div className="h-full w-[220px] bg-[var(--brand-bg)] text-white p-3 border-r border-white/10">
      <Group title="Planning">
        <Item to={p("stages/manage")} icon={Calendar} label="Stages" />
        <Item to={p("stages/wizard")} icon={Box} label="Stage Wizard" />
        <Item to={`/admin/stage-templates`} icon={Settings} label="Templates" />
      </Group>
      <Group title="Execution">
        <Item to={p("documents")} icon={FileText} label="Documents" />
        <Item to={p("meetings")} icon={Calendar} label="Meetings" />
        <Item to={p("updates/review")} icon={Bell} label="Updates" />
      </Group>
      <Group title="Governance">
        <Item to={p("signoff/docs")} icon={FileText} label="Sign-Off Docs" />
        <Item to={p("admin/ops")} icon={Settings} label="Ops" />
        <Item to={`/admin/branding`} icon={Settings} label="Branding" />
      </Group>
      <Group title="Insights">
        <Item to={p("dashboard")} icon={Home} label="Dashboard" />
        <Item to={p("admin/method")} icon={LineChart} label="Method Insights" />
      </Group>
      <Group title="Team">
        <Item to={p("admin/invite")} icon={Users} label="Invite" />
        <Item to={p("admin/team-access")} icon={Users} label="Team Access" />
      </Group>
    </div>
  );
}


This guarantees no link ever points to /projects/undefined/.... If a pid can’t be resolved, we route the user to /projects/select.

5) (Optional) Backend: simple projects list (dev-safe)

If you don’t have a projects listing endpoint yet, add this tiny one:

server/routers/projects_list.py (new)

from fastapi import APIRouter, Depends
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/projects", tags=["projects"])

@router.get("/list")
def list_projects(ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    try:
        rows = sb.table("projects").select("id,code,name").eq("org_id", ctx.org_id).order("created_at", desc=True).limit(50).execute().data or []
        return {"items": rows}
    except Exception:
        # dev-safe fallback
        return {"items": []}


Mount in server/main.py:

from .routers import projects_list
app.include_router(projects_list.router)

6) Wire the guard + select route

Patch client/src/App.jsx:

Import guard + select page:

import ProjectGuard from "@/components/ProjectGuard";
import ProjectSelect from "@/pages/ProjectSelect";


Add the select route:

<Route path="/projects/select" element={<ProjectSelect/>} />


Wrap your project routes with the guard. The simplest way: wrap the <Routes> block or just wrap the route elements:

<Routes>
  <Route path="/projects/:projectId/*" element={
    <ProjectGuard>
      {/* put your layout + nested routes here, or keep your existing element and include guard in its render */}
      <YourProjectLayout />
    </ProjectGuard>
  } />
  {/* non-project routes (admin/global) */}
  <Route path="/projects/select" element={<ProjectSelect/>} />
  {/* legacy routes unchanged */}
</Routes>


If you don’t have a single layout component, you can instead wrap each project route’s element with <ProjectGuard>…</ProjectGuard>.

7) Make header tolerant when there’s no pid

Patch client/src/components/BrandedHeader.tsx — no change needed for fetch; but adjust Nav or small UI to avoid pid fetch loops. You already load /branding/settings if there’s no projectId — good.

8) Sanity (dev)

Open app → Brand v2 shows.

Sidebar links now navigate without /projects/undefined/....

If you land on a link without pid, it redirects you to Project Select.

Pick a project → persists; dashboard loads immediately (no manual refresh needed).