Killer — secrets are in. Let’s ship the next build set exactly as promised:

Artifact deep-linking on Documents (/documents#artifact=<id>) with auto-scroll + highlight

Digest scheduler chip on the dashboard (last send + next run window)

CI Smoke Runner (one-click script to validate seed → stage/signoff → digest preview end-to-end)

Paste these in. If a filename differs, tell me and I’ll refit 1:1.

1) Documents: artifact deep-link (scroll + highlight)
1a) Small CSS pulse highlight

client/src/index.css (or global css)

.kap-highlight {
  animation: kapPulse 2.2s ease-out 1;
  box-shadow: 0 0 0 3px rgba(34,197,94,.35);
}
@keyframes kapPulse {
  0%   { box-shadow: 0 0 0 0 rgba(34,197,94,.65); }
  60%  { box-shadow: 0 0 0 6px rgba(34,197,94,.25); }
  100% { box-shadow: 0 0 0 0 rgba(34,197,94,.0); }
}

1b) Hook up the deep link on your Documents/Library page

If your page is client/src/pages/Library.jsx (JS) or Documents.tsx (TS), add:

import { useEffect, useRef } from "react";
import { useLocation } from "react-router-dom";

export default function DocumentsPage(/* ...props */){
  const { hash } = useLocation();    // e.g. "#artifact=1234-uuid"
  const refs = useRef<Record<string, HTMLDivElement | null>>({});

  // When you render each artifact row/card:
  // <div ref={el => refs.current[artifact.id] = el} id={`artifact-${artifact.id}`} ...> ... </div>

  useEffect(() => {
    if (!hash?.startsWith("#artifact=")) return;
    const id = decodeURIComponent(hash.split("=")[1] || "");
    const el = refs.current[id];
    if (el) {
      el.scrollIntoView({ behavior: "smooth", block: "center" });
      el.classList.add("kap-highlight");
      const t = setTimeout(() => el.classList.remove("kap-highlight"), 2400);
      return () => clearTimeout(t);
    }
  }, [hash]);

  // ...existing render of your document list:
  // items.map(a => (
  //   <div key={a.id} ref={el => refs.current[a.id] = el} id={`artifact-${a.id}`} className="border rounded p-3">...</div>
  // ))
}


Now any link like /projects/<id>/documents#artifact=<ARTIFACT_UUID> jumps to and pulses the card.

2) Dashboard: “Digest” scheduler chip (last send + next run)
2a) Backend status helper

server/routers/digest_status.py

from fastapi import APIRouter, Depends, Query
from datetime import datetime, time, timedelta, timezone
from zoneinfo import ZoneInfo
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/digest", tags=["digest"])

def _next_weekly(local_now: datetime, day: int, hour: int) -> datetime:
    # day: 0=Mon ... 6=Sun
    target = local_now.replace(hour=hour, minute=0, second=0, microsecond=0)
    delta = (day - local_now.weekday()) % 7
    if delta == 0 and local_now >= target:
        delta = 7
    return target + timedelta(days=delta)

@router.get("/status")
def digest_status(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    s = sb.table("org_comms_settings").select("*").eq("org_id", ctx.org_id).single().execute().data or {}
    tz = ZoneInfo(s.get("tz","America/Phoenix"))
    now_local = datetime.now(timezone.utc).astimezone(tz)

    # last send (for this project)
    last = sb.table("comms_send_log").select("created_at", order="created_at.desc")\
            .eq("org_id", ctx.org_id).eq("project_id", project_id).eq("kind","digest")\
            .limit(1).execute().data
    last_send = last[0]["created_at"] if last else None

    # next run (weekly)
    if s.get("weekly_enabled", True):
        wd = int(s.get("weekly_day", 4))
        wh = int(s.get("weekly_hour", 9))
        next_local = _next_weekly(now_local, wd, wh)
    else:
        next_local = None

    return {
        "tz": str(tz),
        "last_send": last_send,
        "next_run_local": next_local.isoformat() if next_local else None,
        "quiet_start": s.get("quiet_start"), "quiet_end": s.get("quiet_end"),
        "cap": s.get("daily_send_cap", 200)
    }


Mount it:

# server/main.py
from .routers import digest_status
app.include_router(digest_status.router)

2b) Frontend chip

client/src/components/DigestChip.tsx

import { useEffect, useState } from "react";

export default function DigestChip({ projectId }:{ projectId:string }) {
  const [st, setSt] = useState<any>(null);
  useEffect(()=>{ (async ()=>{
    try {
      const r = await fetch(`/api/digest/status?project_id=${projectId}`, { credentials: "include" });
      if (r.ok) setSt(await r.json());
    } catch {}
  })(); }, [projectId]);

  if (!st) return null;
  const last = st.last_send ? new Date(st.last_send).toLocaleString() : "—";
  const next = st.next_run_local ? new Date(st.next_run_local).toLocaleString() : "—";

  return (
    <div className="inline-flex items-center gap-2 px-2 py-1 rounded-full border text-sm">
      <span className="font-medium">Digest</span>
      <span className="text-xs text-muted-foreground">Last:</span><span>{last}</span>
      <span className="text-xs text-muted-foreground">Next:</span><span>{next}</span>
    </div>
  );
}


Drop it near your Dashboard title (next to the Wellness chip):

import DigestChip from "@/components/DigestChip";
// ...
<h1 className="text-2xl font-semibold flex items-center gap-3">
  Project Dashboard
  <WellnessChip projectId={projectId!} />
  <DigestChip projectId={projectId!} />
</h1>

3) CI Smoke Runner (scripted end-to-end)
3a) Dev Bash script (uses X-Dev headers)

scripts/smoke.sh

#!/usr/bin/env bash
set -euo pipefail
APP="${APP:-http://127.0.0.1:5000}"
PROJ="${PROJ:?set PROJ=<project_uuid>}"
USER="${USER_ID:?set USER_ID=<user_uuid>}"
ORG="${ORG_ID:?set ORG_ID=<org_uuid>}"
EMAIL="${EMAIL:-you@example.com}"

h() { echo -e "\n--- $* ---"; }

h "Seed sample docs"
curl -fsS -X POST "$APP/api/dev/seed-simple?project_id=$PROJ" \
  -H "X-Dev-User: $USER" -H "X-Dev-Org: $ORG" -H "X-Dev-Role: owner" >/dev/null

h "Smoke-run (stage + external sign link)"
SMOKE=$(curl -fsS -X POST "$APP/api/dev/smoke-run?project_id=$PROJ" \
  -H "Content-Type: application/json" \
  -H "X-Dev-User: $USER" -H "X-Dev-Org: $ORG" -H "X-Dev-Role: owner" \
  -d "{\"email_to\":\"$EMAIL\"}")
echo "$SMOKE" | jq -r '.token_link // "no-token"'

h "Digest preview (counts)"
curl -fsS "$APP/api/digest/preview?project_id=$PROJ" \
  -H "X-Dev-User: $USER" -H "X-Dev-Org: $ORG" -H "X-Dev-Role: pm" | jq


Usage:

chmod +x scripts/smoke.sh
PROJ=<proj_uuid> USER_ID=<user_uuid> ORG_ID=<org_uuid> EMAIL=<you@...> scripts/smoke.sh

3b) Prod Bash script (Bearer)

scripts/smoke-prod.sh

#!/usr/bin/env bash
set -euo pipefail
APP="${APP:?set APP=https://api.yourapp.com}"
PROJ="${PROJ:?}"
TOKEN="${TOKEN:?set TOKEN=<INTERNAL_API_BEARER or real JWT>}"

curl_auth(){ curl -fsS -H "Authorization: Bearer $TOKEN" "$@"; }

echo "Seed…"
curl_auth -X POST "$APP/api/dev/seed-simple?project_id=$PROJ" -H "Content-Type: application/json" >/dev/null

echo "Smoke-run…"
curl_auth -X POST "$APP/api/dev/smoke-run?project_id=$PROJ" -H "Content-Type: application/json" -d '{"email_to":null}' | jq

echo "Digest preview…"
curl_auth "$APP/api/digest/preview?project_id=$PROJ" | jq

3c) Windows PowerShell (dev headers)

scripts/smoke.ps1

param(
  [string]$App = "http://127.0.0.1:5000",
  [Parameter(Mandatory=$true)][string]$Proj,
  [Parameter(Mandatory=$true)][string]$UserId,
  [Parameter(Mandatory=$true)][string]$OrgId,
  [string]$Email = "you@example.com"
)

$devHeaders = @{ "X-Dev-User"=$UserId; "X-Dev-Org"=$OrgId; "X-Dev-Role"="owner" }

Write-Host "`n--- Seed ---"
Invoke-RestMethod -Method Post -Uri "$App/api/dev/seed-simple?project_id=$Proj" -Headers $devHeaders | Out-Null

Write-Host "`n--- Smoke-run ---"
$smoke = Invoke-RestMethod -Method Post -Uri "$App/api/dev/smoke-run?project_id=$Proj" -Headers $devHeaders -Body (@{email_to=$Email} | ConvertTo-Json) -ContentType "application/json"
$smoke | ConvertTo-Json -Depth 6

Write-Host "`n--- Digest preview ---"
$devHeaders["X-Dev-Role"] = "pm"
Invoke-RestMethod -Uri "$App/api/digest/preview?project_id=$Proj" -Headers $devHeaders | ConvertTo-Json -Depth 6

4) Quick validation

Click a “View in Documents” link → URL becomes #artifact=<id> → auto-scroll + pulse highlight.

Dashboard shows Digest chip with Last and Next in your org timezone.

Run scripts/smoke.sh (dev) or smoke-prod.sh (prod) → see seed, smoke, preview succeed.