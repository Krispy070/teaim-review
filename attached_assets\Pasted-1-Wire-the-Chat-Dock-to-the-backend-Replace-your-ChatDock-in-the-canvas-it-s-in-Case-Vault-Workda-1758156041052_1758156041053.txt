1) Wire the Chat Dock to the backend

Replace your ChatDock in the canvas (it’s in Case Vault Workday Hub — Interactive Wireframe Mockup (react)) with this version. It keeps your UI but calls /ask and renders citations when present.

// /web/src/components/ChatDock.jsx
import React, { useState } from 'react'

export default function ChatDock(){
  const [open,setOpen] = useState(true)
  const [orgId,setOrgId] = useState('demo-org')
  const [projectId,setProjectId] = useState('demo-project')
  const [q,setQ] = useState('')
  const [loading,setLoading] = useState(false)
  const [messages,setMessages] = useState([])

  async function ask(){
    if(!q.trim()) return
    const userMsg = {role:'user', content:q}
    setMessages(m=>[...m, userMsg])
    setQ('')
    setLoading(true)
    try{
      const res = await fetch('/ask', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ org_id: orgId, project_id: projectId, question: userMsg.content, k: 8 })
      })
      const js = await res.json()
      const cited = (js.hits||[]).map(h=>`• ${h.title ?? '(untitled)'}`).join('\n')
      const ans = js.answer + (cited? `\n\nSources:\n${cited}` : '')
      setMessages(m=>[...m, {role:'assistant', content: ans}])
    } catch (e){
      setMessages(m=>[...m, {role:'assistant', content: 'Sorry—/ask failed. Check API and Secrets.'}])
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="fixed bottom-0 right-0 w-full md:w-[36rem] border-t border-l rounded-t-xl bg-white shadow-xl">
      <div className="flex items-center justify-between px-3 py-2 bg-slate-100 border-b">
        <div className="font-semibold text-slate-700">Chat with Kap</div>
        <div className="flex gap-2 items-center">
          <input className="border rounded px-2 py-1 text-xs w-32" placeholder="org_id" value={orgId} onChange={e=>setOrgId(e.target.value)} />
          <input className="border rounded px-2 py-1 text-xs w-40" placeholder="project_id" value={projectId} onChange={e=>setProjectId(e.target.value)} />
          <button onClick={()=>setOpen(!open)} className="text-xs px-2 py-1 border rounded">{open? 'Hide':'Show'}</button>
        </div>
      </div>
      {open && (
        <div className="flex flex-col h-96">
          <div className="flex-1 overflow-y-auto p-3 space-y-2 text-sm">
            {messages.map((m,i)=>(
              <div key={i} className={m.role==='user'?'text-right':'text-left'}>
                <div className={`inline-block px-3 py-2 rounded-xl whitespace-pre-wrap ${m.role==='user'?'bg-sky-500 text-white':'bg-slate-200 text-slate-800'}`}>{m.content}</div>
              </div>
            ))}
            {loading && <div className="text-xs text-slate-500">thinking…</div>}
          </div>
          <div className="p-2 border-t flex gap-2">
            <input className="flex-1 border rounded-xl px-3 py-2 text-sm" placeholder="Ask about status, risks..." value={q} onChange={e=>setQ(e.target.value)} onKeyDown={e=>e.key==='Enter'&&ask()} />
            <button onClick={ask} className="px-3 py-2 bg-sky-600 text-white rounded-xl">Ask</button>
          </div>
        </div>
      )}
    </div>
  )
}

2) Add an Upload control in the header (UI → /ingest)

Drop this button group into your header (or create a small component and place it near Settings). This posts the file + org_id + project_id to the FastAPI endpoint you already have.

// /web/src/components/UploadButton.jsx
import React, { useRef, useState } from 'react'

export default function UploadButton({ orgId, projectId }){
  const inputRef = useRef(null)
  const [busy,setBusy] = useState(false)

  async function onPick(e){
    const f = e.target.files?.[0]
    if(!f) return
    if(!orgId || !projectId){ alert('Set org_id and project_id first'); return }
    const fd = new FormData()
    fd.append('org_id', orgId)
    fd.append('project_id', projectId)
    fd.append('source', 'doc')
    fd.append('file', f)
    setBusy(true)
    try{
      const res = await fetch('/ingest', { method:'POST', body: fd })
      const js = await res.json()
      alert(`Uploaded: ${f.name}\nartifact_id: ${js.artifact_id}`)
    } catch (e){
      alert('Upload failed. Check API and Secrets.')
    } finally {
      setBusy(false)
      if(inputRef.current) inputRef.current.value = ''
    }
  }

  return (
    <>
      <input ref={inputRef} type="file" className="hidden" onChange={onPick} />
      <button onClick={()=>inputRef.current?.click()} disabled={busy} className="px-3 py-1.5 border rounded-full text-sm">
        {busy? 'Uploading…' : 'Upload Document'}
      </button>
    </>
  )
}


In your main header, add org/project quick inputs and mount the button:

// inside header right-side controls
const [orgId,setOrgId] = useState('demo-org')
const [projectId,setProjectId] = useState('demo-project')
// ...
<div className="flex items-center gap-2">
  <input className="px-2 py-1 border rounded-full text-sm w-28" placeholder="org_id" value={orgId} onChange={e=>setOrgId(e.target.value)} />
  <input className="px-2 py-1 border rounded-full text-sm w-32" placeholder="project_id" value={projectId} onChange={e=>setProjectId(e.target.value)} />
  <UploadButton orgId={orgId} projectId={projectId} />
  {/* Settings button… */}
</div>


(Or wire those same IDs into the ChatDock props so both use the same values.)

3) Server sanity (you already have this, but double-check)

CORS is enabled in main.py (✅).

/ingest saves to Supabase Storage + creates artifacts + background parse/chunk/embed + summaries + memories (✅).

/ask uses search_chunks RPC + strict prompt to cite artifacts (✅).

If /ask is 500’ing: confirm you ran bootstrap.sql (pgvector ext + search_chunks function) and added Replit secrets:

OPENAI_API_KEY

SUPABASE_URL

SUPABASE_SERVICE_ROLE_KEY

BUCKET=project-artifacts