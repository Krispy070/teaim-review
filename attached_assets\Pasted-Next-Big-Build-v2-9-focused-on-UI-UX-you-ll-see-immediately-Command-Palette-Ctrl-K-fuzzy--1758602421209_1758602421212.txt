Next Big Build v2.9 — focused on UI/UX you’ll see immediately:

Command Palette (⌘/Ctrl+K) → fuzzy, project-aware quick nav to all screens

Collapsible + Resizable Sidebar → width drag handle, collapse to icons, remembered locally

Branding live preview → theme color + logos update the header instantly (no reload)

Header environment pill → DEV / STAGING / PROD + project code badge

Safe, Brand v2–aware, and copy-paste ready.

1) Command Palette (⌘/Ctrl+K)
1A) Component

client/src/components/CommandPalette.tsx (new)

import { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";

type Cmd = { label: string; path: string; group: string };

const ROUTES: Cmd[] = [
  // Overview
  { label: "Dashboard", path: "dashboard", group:"Overview" },
  { label: "Timeline", path: "timeline", group:"Overview" },

  // Execution
  { label: "Documents", path: "documents", group:"Execution" },
  { label: "Meeting Summaries", path: "meetings", group:"Execution" },
  { label: "Actions Kanban", path: "actions/kanban", group:"Execution" },
  { label: "Actions", path: "actions/list", group:"Execution" },
  { label: "Stage Sign-Off", path: "stages", group:"Execution" },
  { label: "Compose Sign-Off Package", path: "signoff/compose", group:"Execution" },
  { label: "Integrations & Tech", path: "integrations", group:"Execution" },
  { label: "Data & Reporting", path: "reporting", group:"Execution" },
  { label: "Team Wellness", path: "wellness", group:"Execution" },
  { label: "Financials", path: "financials", group:"Execution" },

  // Planning
  { label: "Stages", path: "stages/manage", group:"Planning" },
  { label: "Stage Wizard", path: "stages/wizard", group:"Planning" },
  { label: "Workstreams", path: "workstreams", group:"Planning" },
  { label: "Training", path: "training", group:"Planning" },
  { label: "Testing", path: "testing", group:"Planning" },
  { label: "Logistics", path: "logistics", group:"Planning" },

  // Governance
  { label: "PM Update Monitor", path: "updates/review", group:"Governance" },
  { label: "Sign-Off Docs", path: "signoff/docs", group:"Governance" },

  // Insights
  { label: "Method Insights", path: "admin/method", group:"Insights" },
  { label: "Audit Timeline", path: "admin/audit-timeline", group:"Insights" },

  // Admin
  { label: "Projects Admin", path: "admin/projects", group:"Admin" },
  { label: "Members", path: "admin/members", group:"Admin" },
  { label: "Team Management", path: "admin/team-access", group:"Admin" },
  { label: "Invite", path: "admin/invite", group:"Admin" },
  { label: "Integrations Tracker", path: "admin/integrations", group:"Admin" },
  { label: "Admin Backups", path: "admin/backups", group:"Admin" },
  { label: "System Health", path: "admin/ops", group:"Admin" },
  { label: "RLS Self-Test", path: "admin/rls-selftest", group:"Admin" },
  { label: "Schema Doctor", path: "admin/schema-doctor", group:"Admin" },
  { label: "QA Tools", path: "admin/qa-tools", group:"Admin" },
  { label: "Smoke Runner", path: "admin/smoke-run", group:"Admin" },
  { label: "Email Center", path: "admin/comms", group:"Admin" },
  { label: "New Project", path: "/projects/new", group:"Admin" }, // absolute
];

function fuseScore(s:string, q:string){
  // simple fuzzy: each query char must appear in order
  s=s.toLowerCase(); q=q.toLowerCase();
  let i=0; for (const c of q){ i=s.indexOf(c, i); if (i===-1) return false; i++; }
  return true;
}

export default function CommandPalette(){
  const [open,setOpen]=useState(false);
  const [q,setQ]=useState("");
  const navigate = useNavigate();
  const { projectId } = useParams();

  useEffect(()=>{
    function onKey(e: KeyboardEvent){
      const cmd = (e.metaKey || e.ctrlKey) && e.key.toLowerCase()==="k";
      if (cmd){ e.preventDefault(); setOpen(true); }
      if (e.key==="Escape"){ setOpen(false); }
    }
    window.addEventListener("keydown", onKey);
    return ()=>window.removeEventListener("keydown", onKey);
  },[]);

  const hits = useMemo(()=>{
    if (!q.trim()) return ROUTES;
    return ROUTES.filter(r => fuseScore(r.label, q));
  },[q]);

  function go(r: Cmd){
    setOpen(false);
    const isAbs = r.path.startsWith("/");
    navigate(isAbs ? r.path : `/projects/${projectId || "select"}/${r.path}`);
  }

  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black/40 z-[200]" onClick={()=>setOpen(false)}>
      <div className="mx-auto mt-[10vh] w-[640px] max-w-[90%] bg-white dark:bg-neutral-900 rounded shadow-xl border" onClick={e=>e.stopPropagation()}>
        <div className="p-2 border-b">
          <input
            autoFocus
            placeholder="Go to… (try: timeline, actions, sign-off)"
            className="w-full p-2 text-sm border rounded"
            value={q} onChange={e=>setQ(e.target.value)}
          />
        </div>
        <div className="max-h-[50vh] overflow-auto">
          {["Overview","Execution","Planning","Governance","Insights","Admin"].map(g=>(
            <div key={g}>
              <div className="px-2 py-1 text-[11px] uppercase tracking-wider text-gray-400">{g}</div>
              {(hits.filter(h=>h.group===g)).map(r=>(
                <button key={r.label} className="w-full text-left px-2 py-1 hover:bg-black/5 dark:hover:bg-white/5"
                        onClick={()=>go(r)}>
                  <div className="text-sm">{r.label}</div>
                  <div className="text-xs text-muted-foreground">
                    {r.path.startsWith("/") ? r.path : `/projects/:projectId/${r.path}`}
                  </div>
                </button>
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

1B) Include it globally (Brand v2 header area)

client/src/components/BrandedHeader.tsx (top-level return, near the right controls)

import CommandPalette from "@/components/CommandPalette";
// inside the header JSX, anywhere is fine:
<CommandPalette />


Press ⌘K / Ctrl+K to open; type “timeline”, “sign-off”, etc.

2) Collapsible + Resizable Sidebar
2A) Local storage helper

client/src/hooks/useLocalStorage.ts (new)

import { useEffect, useState } from "react";
export function useLocalStorage<T>(key:string, initial:T){
  const [v,setV]=useState<T>(()=>{ try{ const k=localStorage.getItem(key); return k? JSON.parse(k): initial; }catch{ return initial; }});
  useEffect(()=>{ try{ localStorage.setItem(key, JSON.stringify(v)); }catch{} },[key,v]);
  return [v,setV] as const;
}

2B) SidebarV2 — collapse + resize

Patch client/src/components/SidebarV2.tsx

Add state:

import { useLocalStorage } from "@/hooks/useLocalStorage";
// …
const [collapsed,setCollapsed] = useLocalStorage<boolean>("kap.sidebar.collapsed", false);
const [width,setWidth] = useLocalStorage<number>("kap.sidebar.width", 240);
const minW=180, maxW=360;


Apply style to the wrapper:

return (
  <div className="h-full bg-[var(--brand-bg)] text-white p-3 border-r border-white/10 overflow-auto relative"
       style={{ width: collapsed ? 60 : width }}>


Add a collapse button + drag handle at the top:

<div className="flex items-center justify-between mb-2">
  <div className="text-[11px] uppercase tracking-wider text-gray-400">Menu</div>
  <button className="brand-btn text-[11px]" onClick={()=>setCollapsed(!collapsed)}>{collapsed? "›":"‹"}</button>
</div>
<div
  className="absolute top-0 right-0 h-full w-[4px] cursor-col-resize"
  onMouseDown={(e)=>{
    const startX = e.clientX; const startW = width;
    function move(ev:MouseEvent){
      const nw = Math.min(maxW, Math.max(minW, startW + (ev.clientX - startX)));
      setWidth(nw);
    }
    function up(){ window.removeEventListener("mousemove",move); window.removeEventListener("mouseup",up); }
    window.addEventListener("mousemove",move); window.addEventListener("mouseup",up);
  }}
/>


Hide labels when collapsed:

Change Item:

function Item({to, icon:Icon, label}:{to:string; icon:any; label:string}){
  return (
    <NavLink to={to}
      className={({isActive})=>`flex items-center gap-2 px-2 py-1 rounded ${isActive?'bg-white/10 text-white':'text-gray-300 hover:bg-white/5'}`}>
      <Icon size={16} />
      {!collapsed && <span className="text-sm">{label}</span>}
    </NavLink>
  );
}


Sidebar now collapses to icons and can be resized; both states persist.

3) Branding live preview (no reload)

Patch client/src/pages/BrandingSettings.tsx

After theme color input onChange, apply CSS var on the fly:

<input className="border rounded p-2 w-[140px]" placeholder="#111111"
  value={s.theme_color||"#111111"}
  onChange={e=>{
    const v = e.target.value;
    setS({...s, theme_color: v});
    try{ document.documentElement.style.setProperty('--brand-color', v); }catch{}
  }}
/>


After logo uploads, force header re-fetch quickly:

Add:

async function refreshHeaderSoon(){ try{
  // trivial “poke” to force next /branding/settings reload: toggle a hash
  const el = document.querySelector("img[alt='customer']") as HTMLImageElement | null;
  el && (el.src = el.src + (el.src.includes("?") ? "&ts=": "?ts=") + Date.now());
}catch{}}


Call refreshHeaderSoon() after each successful upload.

4) Environment pill + project code in header

Patch client/src/components/BrandedHeader.tsx

Derive env:

const env = import.meta.env.VITE_ENV || (location.hostname.includes("repl") ? "DEV" : "PROD");
const code = (b?.customer_name || b?.vendor_name) ? (b.customer_name || b.vendor_name) : "";


Add pill near the toggle:

<span className="brand-chip text-[11px]">{env}</span>

5) Lazy-load big pages (quick wins)

Patch client/src/App.jsx (ensure you already used lazy/Suspense; if not, add these now)

import { lazy } from "react";
const DashboardV2 = lazy(()=> import("@/pages/DashboardV2"));
const TimelinePage = lazy(()=> import("@/pages/Timeline"));
const StagesPage = lazy(()=> import("@/pages/Stages"));
const MeetingsPage = lazy(()=> import("@/pages/Meetings"));
const UpdatesReview = lazy(()=> import("@/pages/UpdatesReview"));

6) 120-second validation

⌘K brings up a global nav → type “sign-off”, “kanban”, “schema” → instant nav

Sidebar collapses to icons, resizes, and remembers width

Changing theme color / logo on Branding updates header immediately

DEV / STAGING / PROD pill visible; breadcrumb shows project

All heavy pages still feel snappy (lazy-loading)