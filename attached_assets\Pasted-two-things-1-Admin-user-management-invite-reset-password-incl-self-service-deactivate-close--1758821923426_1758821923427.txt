two things: (1) Admin user management (invite, reset password incl. self-service, deactivate/close) and (2) a full test suite to run end-to-end before you do your own testing, plus pre-deploy guidance so the app is clean of dev shortcuts. Below is the tight, copy-paste-ready upgrade.

1) User Management for PM/Admin (+ Self-Service)

PM/Admin can: invite users, reset passwords, disable/enable (deactivate) and delete (soft / hard if Supabase Service Role available).
End users can: request a reset link (self-service), update password when signed in.

You already have server/routers/users_admin.py (invite/reset/disable/enable/delete) and Admin Users UI wired. Below adds self-service password reset + a simple Profile → Change Password page.

1A) Backend — Self-service reset (optional; dev-safe fallback)

server/routers/users_self_service.py (new)

from fastapi import APIRouter, Depends, Query
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase
from ..auth_admin import admin_generate_link
import os

router = APIRouter(prefix="/api/auth", tags=["auth"])

@router.post("/request_reset")
def request_reset(email: str = Query(...)):
    """
    Self-service: issue a recovery link by email if SERVICE ROLE is configured;
    otherwise returns ok=False so the frontend can fall back to supabase-js flow.
    """
    try:
        link = admin_generate_link("recovery", email, os.getenv("APP_BASE_URL","").rstrip("/")).get("action_link")
        if not link: return {"ok": False}
        # best-effort email
        try:
            from ..email.util import mailgun_send_html
            mailgun_send_html([email], "[TEAIM] Password reset", f"<p>Reset link: <a href='{link}'>Reset</a></p>")
        except Exception: ...
        return {"ok": True}
    except Exception:
        return {"ok": False}


Mount in server/main.py:

from .routers import users_self_service
app.include_router(users_self_service.router)


If your Supabase Service Role isn’t set, this will return {ok:false} and the frontend will instead call supabase.auth.resetPasswordForEmail() directly using the browser’s anon key.

1B) Frontend — Forgot Password (self-service) + Profile → Change Password
Forgot Password (public)

client/src/pages/ForgotPassword.tsx (new)

import { useState } from "react";

export default function ForgotPassword(){
  const [email,setEmail]=useState(""); const [msg,setMsg]=useState("");
  async function send(){
    setMsg("");
    // Try backend (admin-generated recovery link)
    const r = await fetch(`/api/auth/request_reset?email=${encodeURIComponent(email)}`, { method:"POST" });
    const d = await r.json().catch(()=>({ok:false}));
    if (d.ok){ setMsg("Check your email for a reset link."); return; }

    // Fallback: supabase-js in browser (if you expose supabase client)
    try{
      // @ts-ignore
      const { createClient } = await import("@supabase/supabase-js");
      // You must expose NEXT_PUBLIC/VITE_SUPABASE_URL + ANON_KEY in client env
      // @ts-ignore
      const supa = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);
      const { error } = await supa.auth.resetPasswordForEmail(email, { redirectTo: window.location.origin + "/auth/update-password" });
      if (!error){ setMsg("Check your email for a reset link."); return; }
    }catch{}
    setMsg("Unable to send reset link. Contact an admin.");
  }
  return (
    <div className="max-w-md mx-auto brand-card p-3">
      <div className="text-sm font-medium mb-2">Forgot Password</div>
      <input className="border rounded p-2 w-full text-sm mb-2" placeholder="you@company.com" value={email} onChange={e=>setEmail(e.target.value)} />
      <button className="brand-btn text-xs" onClick={send}>Send reset link</button>
      {msg && <div className="text-xs mt-2 text-muted-foreground">{msg}</div>}
    </div>
  );
}

Profile → Change Password (signed-in)

client/src/pages/Profile.tsx (new)

import { useState } from "react";
// @ts-ignore
import { createClient } from "@supabase/supabase-js";

const supa = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);

export default function Profile(){
  const [pw,setPw]=useState(""); const [msg,setMsg]=useState("");
  async function save(){
    setMsg("");
    try{
      const { data: { user } } = await supa.auth.getUser();
      if (!user){ setMsg("Not signed in."); return; }
      const { error } = await supa.auth.updateUser({ password: pw });
      setMsg(error? "Failed to update password." : "Password updated.");
    }catch{ setMsg("Failed to update password."); }
  }
  return (
    <div className="max-w-md mx-auto brand-card p-3">
      <div className="text-sm font-medium mb-2">Profile</div>
      <input type="password" className="border rounded p-2 w-full text-sm mb-2" placeholder="New password" value={pw} onChange={e=>setPw(e.target.value)} />
      <button className="brand-btn text-xs" onClick={save}>Update password</button>
      {msg && <div className="text-xs mt-2 text-muted-foreground">{msg}</div>}
    </div>
  );
}


Routes in client/src/App.jsx:

import ForgotPassword from "@/pages/ForgotPassword";
import Profile from "@/pages/Profile";
// …
<Route path="/auth/forgot-password" element={<ForgotPassword/>} />
<Route path="/profile" element={<Profile/>} />


Reset password availability: Admin can trigger reset for any email (/api/users/reset_password), and users can self-request via /auth/forgot-password.

2) Full-Suite Test — one command on Replit

You already have:

scripts/dev_smoke.sh (API smoke)

tests/e2e.spec.ts (Playwright nav sanity)

Add a full suite wrapper to run both (and any lint/typecheck you have):

scripts/full_suite.sh (new)

#!/usr/bin/env bash
set -euo pipefail
echo "== Full Suite: Lint/Type/API/E2E =="

if [ -f package.json ]; then
  if npm run -s lint >/dev/null 2>&1; then echo "✅ Lint"; else echo "ℹ️ Lint skipped"; fi
  if npm run -s typecheck >/dev/null 2>&1; then echo "✅ Typecheck"; else echo "ℹ️ Typecheck skipped"; fi
fi

echo "== API smoke =="
bash ./scripts/dev_smoke.sh

echo "== E2E (Playwright) =="
npx playwright install --with-deps >/dev/null 2>&1 || true
npx playwright test || (echo "❌ E2E failed" && exit 1)

echo "== SUCCESS =="


package.json

{
  "scripts": {
    "dev:smoke": "bash ./scripts/dev_smoke.sh",
    "test:e2e": "playwright test",
    "test:full": "bash ./scripts/full_suite.sh"
  }
}


Run on Replit console:

npm run test:full


It will print ✅/❌ and exit non-zero on failure—perfect for CI or manual gate.

3) Staging vs Sandbox (Pre-Deploy checklist)

Recommendation: Deploy to a Staging project (not your dev sandbox), then run npm run test:full there. When green, cut over to Production.

A) Env & Auth hardening (Staging/Prod)

DEV_AUTH=0 (no X-Dev headers accepted)

Disable Express proxy header pass-through for X-Dev-* (if still present in server/routes.ts)

NODE_ENV=production, VITE_DEV_AUTH=0

Supabase:

SUPABASE_URL, SUPABASE_ANON_KEY (client)

SUPABASE_SERVICE_ROLE_KEY (server only)

Mailgun: MAILGUN_DOMAIN, MAILGUN_API_KEY (live domain, not sandbox)

App: APP_BASE_URL=https://staging.teaim.app (so links in emails are correct)

B) RLS & disable flag

Ensure RLS policies enforce members.is_disabled = false for all reads/writes; when PM/Admin disables a user, they’re effectively locked out even if auth token exists.

C) Jobs/schedulers (Staging/Prod only)

Enable startup tasks (nightly revoke, queue processing, owner digest, breach-soon nudge, auto-archive) — you have them all via server/scheduler.py.

In dev/sandbox you can leave them on; in Staging, verify Mailgun domain is safe (e.g., “staging.teaim.app”).

D) Kill dev shortcuts

Remove/disable MemStorage fallbacks (where any are still left) if you don’t want dev-style behavior.

Confirm /api/... alias vs prefix standardization (you adopted route aliases already).

Brand v2 default = ✅ (you already made v2 default with toggle off if needed).

E) Final gates

Run npm run test:full in Staging.

Run a manual smoke: login → Dashboard → Workstreams → one area open item quick-edit → Sign-off modal → Pending table CSV → Reporting → Export → Releases ICS → Notifications Drawer mark read.