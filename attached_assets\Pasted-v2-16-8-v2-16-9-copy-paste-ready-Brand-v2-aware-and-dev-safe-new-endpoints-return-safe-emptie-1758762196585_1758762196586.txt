v2.16.8 + v2.16.9 — copy-paste ready, Brand v2–aware, and dev-safe (new endpoints return safe empties if tables/columns aren’t present).

v2.16.8 — Server-side memory everywhere + Notifications Drawer
1) Server-side “last tab” / “last route” memory (generalized)

server/routers/user_prefs.py (new)

from fastapi import APIRouter, Depends, Query
from pydantic import BaseModel
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/user_prefs", tags=["user_prefs"])

class PrefBody(BaseModel):
    key: str
    val: str
    scope: str | None = None  # optional (area, route, etc.)

@router.get("/get")
def get_pref(key: str = Query(...), project_id: str | None = None,
             scope: str | None = None, ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    try:
        q = sb.table("user_prefs").select("val").eq("user_id", ctx.user_id).eq("key", key)
        if project_id: q = q.eq("project_id", project_id)
        if scope: q = q.eq("scope", scope)
        r = q.single().execute().data or {}
        return {"val": r.get("val")}
    except Exception:
        return {"val": None}

@router.post("/set")
def set_pref(body: PrefBody, project_id: str | None = None, ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    try:
        sb.table("user_prefs").upsert({
            "user_id": ctx.user_id, "project_id": project_id, "key": body.key,
            "scope": body.scope, "val": body.val
        }, on_conflict="user_id,project_id,key,scope").execute()
        return {"ok": True}
    except Exception:
        return {"ok": False}


Mount in server/main.py:

from .routers import user_prefs
app.include_router(user_prefs.router)


Use across the app (example: remember last dashboard tab or reporting tab):

// helper
async function getPref(projectId:string|undefined, key:string, scope?:string){
  try{ const r=await (await fetch(`/api/user_prefs/get?key=${encodeURIComponent(key)}${projectId?`&project_id=${projectId}`:""}${scope?`&scope=${encodeURIComponent(scope)}`:""}`, {credentials:"include"})).json(); return r?.val; }catch{return null;}
}
async function setPref(projectId:string|undefined, key:string, val:string, scope?:string){
  try{ await fetch(`/api/user_prefs/set${projectId?`?project_id=${projectId}`:""}`, {method:"POST",credentials:"include",headers:{'Content-Type':'application/json'},body:JSON.stringify({key,val,scope})}); }catch{}
}


Apply to (examples):

WorkstreamArea (already done for last tab via area_prefs; you can gradually migrate to user_prefs for consistency)

Reporting: remember last Workbooks/Reports tab

Changes: remember last List/Kanban used

2) Notifications Drawer (simple & persistent)

Backend — minimal unified notifications list (dev-safe):

server/routers/notifications.py (new)

from fastapi import APIRouter, Depends, Query
from datetime import datetime, timedelta, timezone
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/notify", tags=["notifications"])

@router.get("/list")
def list_notifs(project_id: str | None = Query(None), days:int=14, ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    start = (datetime.now(timezone.utc) - timedelta(days=max(1,days))).isoformat()
    items=[]
    # best-effort union (area comments, changes transitions, signoff reminders/pendings)
    try:
        c = sb.table("area_comments").select("created_at,area,message,user_id").gte("created_at",start).limit(200).execute().data or []
        items += [{"kind":"area_comment","created_at":x["created_at"],"title":f"New comment in {x.get('area')}", "detail":x.get("message")[:120]} for x in c]
    except Exception: ...
    try:
        ch = sb.table("audit_events").select("created_at,kind,details").gte("created_at",start).limit(200).execute().data or []
        items += [{"kind":x.get("kind") or "event","created_at":x["created_at"],"title":x.get("kind"),"detail":str(x.get("details"))[:120]} for x in ch]
    except Exception: ...
    try:
        tk = sb.table("signoff_doc_tokens").select("created_at,signer_email").is_("used_at","null").gte("created_at",start).limit(100).execute().data or []
        items += [{"kind":"signoff_pending","created_at":x["created_at"],"title":"Sign-off pending","detail":x.get("signer_email") or ""} for x in tk]
    except Exception: ...
    items.sort(key=lambda i: i.get("created_at") or "", reverse=True)
    return {"items": items[:200]}

@router.post("/mark_read_all")
def mark_read_all(ctx: TenantCtx = Depends(member_ctx)):
    # if you have a notifications table, mark as read here; dev-safe no-op:
    return {"ok": True}


Mount in server/main.py:

from .routers import notifications
app.include_router(notifications.router)


Frontend Drawer:

client/src/components/NotificationsDrawer.tsx (new)

import { useEffect, useState } from "react";
export default function NotificationsDrawer({open,onClose}:{open:boolean;onClose:()=>void}){
  const [items,setItems]=useState<any[]>([]);
  useEffect(()=>{ if(!open) return; (async()=>{ try{
    const r=await fetch(`/api/notify/list`, {credentials:"include"}); const d=await r.json(); setItems(d.items||[]);
  }catch{ setItems([]);} })(); },[open]);
  if(!open) return null;
  return (
    <div className="fixed inset-0 z-[210]" onClick={onClose}>
      <div className="absolute right-0 top-0 bottom-0 w-[360px] bg-white dark:bg-neutral-900 border-l" onClick={e=>e.stopPropagation()}>
        <div className="p-2 border-b flex items-center justify-between">
          <div className="text-sm font-medium">Notifications</div>
          <button className="brand-btn text-[11px]" onClick={async()=>{ await fetch(`/api/notify/mark_read_all`,{method:"POST",credentials:"include"}); onClose(); }}>Mark all read</button>
        </div>
        <div className="p-2 space-y-2 overflow-auto h-full">
          {items.map((n,i)=>(
            <div key={i} className="border rounded p-2 text-xs">
              <div className="text-muted-foreground">{new Date(n.created_at).toLocaleString()} • {n.kind}</div>
              <div className="font-medium">{n.title}</div>
              <div className="text-muted-foreground">{n.detail}</div>
            </div>
          ))}
          {!items.length && <div className="text-xs text-muted-foreground">No items.</div>}
        </div>
      </div>
    </div>
  );
}


Hook into header:

client/src/components/BrandedHeader.tsx

import NotificationsDrawer from "@/components/NotificationsDrawer";
const [openN,setOpenN]=useState(false);
<button className="brand-btn text-xs relative" onClick={()=>setOpenN(true)}>Updates</button>
<NotificationsDrawer open={openN} onClose={()=>setOpenN(false)}/>

v2.16.9 — Slack/Teams slash & printable polish
3) Slack/Teams slash style → comment/guide

server/routers/areas_webhook.py (extend)

# Accept text like: "/area HCM Need to update accrual calc #guide"
txt = (body.text or "").strip()
if txt.lower().startswith("/area "):
    parts = txt.split(" ", 2)
    if len(parts) >= 3:
        area = parts[1]
        msg  = parts[2]
        # add comment
        try:
            sbs.table("area_comments").insert({
                "org_id": None, "project_id": body.project_id, "area": area,
                "user_id": body.actor or "webhook", "message": msg
            }).execute()
        except Exception: ...
        # optional guide creation if hashtag
        if "#guide" in msg.lower():
            try:
                sbs.table("guides").insert({
                    "org_id": None, "project_id": body.project_id, "area": area,
                    "title": msg.split("\n")[0][:120], "owner": body.actor or "webhook",
                    "steps": [msg], "sources":[{"type":"webhook","slash":True}],
                    "status":"draft", "updated_at": datetime.now(timezone.utc).isoformat()
                }).execute()
            except Exception: ...
    return {"ok": True}


(Already dev-safe if tables are missing.)

4) Printable polish (Guides/Releases HTML) — page breaks between sections

Ensure this CSS exists:

client/src/index.css

@media print {
  h2 { page-break-before: auto; page-break-after: avoid; }
  h3 { page-break-after: avoid; }
  table { page-break-inside: auto; }
  tr, td, div { page-break-inside: avoid; }
  .page-break { page-break-before: always; }
}


Optionally add <div class="page-break"></div> between lists in Guides/Notes HTML endpoints if long.

5) Micro-perf & UX

Add Cache-Control: public, max-age=30 to /api/guides/list and /api/areas/summary_all

Lazy render NotificationsDrawer only when open=true

Debounce audit feed search input by ~300ms if you notice echoing

Example debounce:

const [q,setQ]=useState(""); const [debQ,setDebQ]=useState("");
useEffect(()=>{ const t=setTimeout(()=>setDebQ(q),300); return ()=>clearTimeout(t); },[q]);
useEffect(()=>{ /* fetch with debQ */ },[debQ]);

2-Minute Validation

Server-side memory now available for any page/tab (via /api/user_prefs)

Notifications Drawer consolidates area comments, audit events, and sign-off pendings; “Mark all read” clears

Slack/Teams: #guide & /area HCM <text> create structured notes/guides in the correct area

Printables: Guides & Releases notes render clean page breaks for PDF via browser print

Perf: minor caching for summary endpoints; lazy UI sections avoid re-renders