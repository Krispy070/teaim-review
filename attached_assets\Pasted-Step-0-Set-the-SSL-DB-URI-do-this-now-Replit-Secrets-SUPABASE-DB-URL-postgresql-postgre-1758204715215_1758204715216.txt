Step 0 — Set the SSL DB URI (do this now)

Replit → Secrets:

SUPABASE_DB_URL = postgresql://postgres:<DB_PASSWORD>@<project-ref>.supabase.co:5432/postgres?sslmode=require


(If unknown, reset DB password in Supabase → Settings → Database.)

Then restart the app.

Step 1 — Drop-in test scripts (copy–paste verbatim)
A) Quick “sanity” script (bash)

Create /scripts/sanity.sh (or just run these in Replit Shell):

# ---- CONFIG ----
ORG="d915376c-2bd7-4e79-b9c9-aab9d7fcb5a8"
PROJ="dced0b98-87b4-46ff-b2a4-2cf8e627e8d2"
BASE="http://localhost:5000/api"

echo "1) DIAG DB"
curl -s "$BASE/diag/db" | jq .

echo "2) DIAG STORAGE"
curl -s "$BASE/diag/storage" | jq .

echo "3) INGEST-SYNC (inline indexing)"
echo "Payroll retro rules and SIT exit criteria." > /tmp/teaim-sync.txt
curl -s -X POST "$BASE/ingest-sync" \
  -F "org_id=$ORG" \
  -F "project_id=$PROJ" \
  -F "file=@/tmp/teaim-sync.txt" | jq .

echo "4) INDEX STATS"
curl -s "$BASE/diag/index-stats?org_id=$ORG&project_id=$PROJ" | jq .

echo "5) LIBRARY (should list the doc)"
curl -s "$BASE/artifacts?org_id=$ORG&project_id=$PROJ&limit=10" | jq .

echo "6) ASK (should include Sources)"
curl -s -X POST "$BASE/ask" \
  -H "Content-Type: application/json" \
  -d "{\"org_id\":\"$ORG\",\"project_id\":\"$PROJ\",\"question\":\"Summarize the latest document and list any exit criteria.\",\"k\":3}" \
  | jq .


Pass criteria:

/diag/db ⇒ { "ok": true }

/diag/storage ⇒ { "ok": true, "signed_url": "https://..." }

/ingest-sync ⇒ { "ok": true, "chunks": 1, "artifact_id": ... }

/diag/index-stats ⇒ "chunks" : 1 or higher

/ask ⇒ Answer with a Sources: line listing teaim-sync.txt

B) Post-ingest validation (SQL)

Run in Supabase → SQL:

-- Replace with your project UUID
select id, title, chunk_count, created_at
from artifacts
where project_id = 'dced0b98-87b4-46ff-b2a4-2cf8e627e8d2'
order by created_at desc
limit 5;

select count(*) chunks
from artifact_chunks
where project_id = 'dced0b98-87b4-46ff-b2a4-2cf8e627e8d2';


Expected: at least 1 artifact; chunks > 0.

C) UI smoke (super quick)

Header: paste the same org/project UUIDs.

Library: see the document + “Open” link.

Chat Dock: ask “Summarize the latest doc…” → answer + Sources:.

Step 2 — If something fails, run these micro-tests
1) DB not OK

Ensure SUPABASE_DB_URL includes ?sslmode=require.

Re-run:

curl -s http://localhost:5000/api/diag/db | jq .

2) Storage not OK

Bucket exists: project-artifacts (Private).

Secrets correct: SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, BUCKET.

Re-run:

curl -s http://localhost:5000/api/diag/storage | jq .

3) /ask returns “need more context”

Run an ingest again (sync path), wait ~5–10s, then re-ask.

Step 3 — Lock in regression tests (so we don’t backslide)

Create /scripts/regress.sh:

ORG="d915376c-2bd7-4e79-b9c9-aab9d7fcb5a8"
PROJ="dced0b98-87b4-46ff-b2a4-2cf8e627e8d2"
BASE="http://localhost:5000/api"

fail(){ echo "❌ $1" && exit 1; }

dbok=$(curl -s "$BASE/diag/db" | jq -r .ok)
[ "$dbok" = "true" ] || fail "DB diag not OK"

stok=$(curl -s "$BASE/diag/storage" | jq -r .ok)
[ "$stok" = "true" ] || fail "Storage diag not OK"

# ensure chunks exist
chunks=$(curl -s "$BASE/diag/index-stats?org_id=$ORG&project_id=$PROJ" | jq -r .chunks)
if [ "$chunks" = "0" ] || [ "$chunks" = "null" ]; then
  echo "No chunks; ingesting a sample..."
  echo "Workday SIT exit criteria and retro rules." > /tmp/regress.txt
  ok=$(curl -s -X POST "$BASE/ingest-sync" \
    -F "org_id=$ORG" \
    -F "project_id=$PROJ" \
    -F "file=@/tmp/regress.txt" | jq -r .ok)
  [ "$ok" = "true" ] || fail "Ingest-sync failed"
fi

ans=$(curl -s -X POST "$BASE/ask" \
  -H "Content-Type: application/json" \
  -d "{\"org_id\":\"$ORG\",\"project_id\":\"$PROJ\",\"question\":\"List exit criteria mentioned.\",\"k\":3}" \
  | jq -r .answer)

echo "$ans" | grep -qi "sources:" || fail "No citations in answer"

echo "✅ Regression OK"


Run anytime:

bash /scripts/regress.sh

Step 4 — Your next feature toggles (once green)

Flip Upload back to /api/ingest (background jobs).

Add /ingest-email (allowlist + #proj: subject rule).

Wire Supabase Auth (magic link, roles; keep service key on server).

Add digest endpoints and schedule.

If you want, paste the outputs of:

/api/diag/db

/api/diag/storage

/api/ingest-sync (one run)

/api/diag/index-stats

…and I’ll confirm we’re fully mission-ready. Then we’ll wire the email dropbox and auth with the same test-first approach.