I read the Replit log. Nav is stable now (no more /projects/undefined), the full menu is back, and Brand v2 is default. Let’s keep the momentum with Next Big Build v2.6.8: quality-of-life + polish that you’ll feel immediately in demos.

This drop is copy-paste ready and safe:

Project Switcher in the header (fast, persistent, role-safe)

Data Room manifest.html (auto-branded HTML inside the ZIP; client-ready)

Wellness Admin chart (30-day trend + CSV export button)

KPI Delta Badge (e.g., +3 next to the count; plays nice with CountUp)

Everything respects Brand v2 and fails gracefully in dev.

1) Project Switcher (header)
1A) Backend (if not already present)

If you already created /api/projects/list, skip this. Otherwise:

server/routers/projects_list.py

from fastapi import APIRouter, Depends
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/projects", tags=["projects"])

@router.get("/list")
def list_projects(ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    try:
        rows = sb.table("projects").select("id,code,name").eq("org_id", ctx.org_id)\
                 .order("created_at", desc=True).limit(100).execute().data or []
        return {"items": rows}
    except Exception:
        return {"items": []}


Mount in server/main.py:

from .routers import projects_list
app.include_router(projects_list.router)

1B) Frontend switcher component

client/src/components/ProjectSwitcher.tsx

import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { getJSON } from "@/lib/authFetch";

type Proj = { id:string; code?:string; name?:string };

export default function ProjectSwitcher(){
  const { projectId } = useParams();
  const [items,setItems]=useState<Proj[]>([]);
  const [open,setOpen]=useState(false);
  const navigate = useNavigate();

  useEffect(()=>{ (async()=>{
    try{ const d = await getJSON(`/api/projects/list`); setItems(d.items||[]); }catch{ setItems([]); }
  })(); },[]);

  function pick(id:string){
    try { localStorage.setItem("kap.projectId", id); } catch {}
    // go to dashboard for consistency
    navigate(`/projects/${id}/dashboard`);
    setOpen(false);
  }

  const cur = items.find(p=>p.id===projectId);
  const label = cur?.code || cur?.name || (projectId?.slice(0,8) || "Pick project");

  return (
    <div className="relative">
      <button className="brand-btn text-xs" onClick={()=>setOpen(o=>!o)} title="Switch Project">
        {label}
      </button>
      {open && (
        <div className="absolute right-0 mt-1 w-[260px] max-h-[260px] overflow-auto border rounded bg-white dark:bg-neutral-900 z-[97]">
          {(items||[]).map(p=>(
            <button key={p.id} onClick={()=>pick(p.id)} className="w-full text-left px-2 py-1 hover:bg-black/5 dark:hover:bg-white/5">
              <div className="text-sm font-medium">{p.code || p.name || p.id.slice(0,8)}</div>
              <div className="text-xs text-muted-foreground">{p.id}</div>
            </button>
          ))}
          {!items.length && <div className="p-2 text-xs text-muted-foreground">No projects found.</div>}
        </div>
      )}
    </div>
  );
}


Add it to the header:

client/src/components/BrandedHeader.tsx (right section, near the toggle)

import ProjectSwitcher from "@/components/ProjectSwitcher";
// ...
<div className="flex items-center gap-2">
  <ProjectSwitcher />
  <button className="brand-btn text-xs" onClick={()=> setBrandV2(!isBrandV2())} title="Toggle Brand v2">
    {isBrandV2() ? "Brand v2: On" : "Brand v2: Off"}
  </button>
  {/* vendor logo + TEAIM label ... */}
</div>

2) Data Room manifest.html (brand header inside ZIP)

Patch server/routers/export_dataroom.py (or create if you haven’t yet). Add branded manifest.html.

Add import:

from ..brand.export_header import export_header_html


Replace/extend the function:

@router.get("/dataroom.zip")
def dataroom(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx); sbs = get_service_supabase()
    proj = sb.table("projects").select("code").eq("id", project_id).single().execute().data or {}
    code = proj.get("code") or project_id
    org = sb.table("org_branding").select("*").eq("org_id", ctx.org_id).single().execute().data or {}

    arts = sb.table("artifacts").select("id,name,storage_bucket,storage_path,created_at")\
            .eq("org_id", ctx.org_id).eq("project_id", project_id).limit(5000).execute().data or []
    links = sb.table("share_links").select("artifact_id,token,expires_at,revoked_at,created_at")\
            .eq("org_id", ctx.org_id).eq("project_id", project_id).limit(5000).execute().data or []
    docs = sb.table("signoff_docs").select("id,name,status,signed_by,signed_name,signed_at,created_at")\
            .eq("org_id", ctx.org_id).eq("project_id", project_id).limit(2000).execute().data or []

    manifest = {
      "org_id": ctx.org_id, "project_id": project_id, "project_code": code,
      "generated_at": dt.datetime.now(dt.timezone.utc).isoformat(),
      "counts": {"artifacts": len(arts), "links": len(links), "signoff_docs": len(docs)}
    }

    # Build HTML manifest (brand header + quick tables)
    hdr = export_header_html(org, code)
    def table(title, rows, cols):
      if not rows: return f"<h3>{title}</h3><div>No items.</div>"
      th = "".join([f"<th style='text-align:left;padding:4px'>{c}</th>" for c in cols])
      trs = ""
      for r in rows[:1000]:
        tds = "".join([f"<td style='padding:4px'>{(r.get(c) if isinstance(r,dict) else '')}</td>" for c in cols])
        trs += f"<tr>{tds}</tr>"
      return f"<h3>{title}</h3><table style='border-collapse:collapse;width:100%'><thead><tr>{th}</tr></thead><tbody>{trs}</tbody></table>"
    html_manifest = f"""<html><head><meta name="viewport" content="width=device-width, initial-scale=1" />
<style>body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;max-width:880px;margin:auto}}</style>
</head><body>{hdr}
<h2>Data Room Manifest</h2>
<div style="font-size:12px;color:#666">Generated {manifest['generated_at']}</div>
{table("Artifacts", arts, ["id","name","created_at"])}
{table("Share Links", links, ["artifact_id","token","expires_at","revoked_at","created_at"])}
{table("Sign-Off Docs", docs, ["id","name","status","signed_by","signed_at","created_at"])}
</body></html>"""

    # Zip it
    buf = io.BytesIO(); zf = zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED)
    zf.writestr("manifest.json", json.dumps(manifest, indent=2))
    zf.writestr("manifest.html", html_manifest)
    zf.writestr("share_links.json", json.dumps(links, indent=2, default=str))
    zf.writestr("signoff_docs.json", json.dumps(docs, indent=2, default=str))
    # pack artifacts best-effort
    for a in arts[:500]:
        try:
            b = sbs.storage().from_(a["storage_bucket"]).download(a["storage_path"])
            zf.writestr(f"artifacts/{a.get('name') or a['id']}", b)
        except Exception as e:
            zf.writestr(f"artifacts/_missing_{a['id']}.txt", f"Missing: {e}")
    zf.close(); buf.seek(0)
    return StreamingResponse(iter([buf.getvalue()]), media_type="application/zip",
        headers={"Content-Disposition": 'attachment; filename="dataroom.zip"'} )

3) Wellness Admin chart (30-day trend) + CSV button
3A) Backend 30-day rollup

server/routers/wellness_rollup.py (new)

from fastapi import APIRouter, Depends, Query
from datetime import datetime, timedelta, timezone
from ..tenant import TenantCtx
from ..guards import require_role
from ..deps import get_user_supabase
import math

router = APIRouter(prefix="/api/wellness", tags=["wellness"])

@router.get("/rollup")
def rollup(project_id: str = Query(...), ctx: TenantCtx = Depends(require_role({"owner","admin","pm"}))):
    sb = get_user_supabase(ctx)
    end = datetime.now(timezone.utc).date()
    start = end - timedelta(days=29)
    try:
        rows = sb.table("team_wellness").select("created_at,score")\
               .eq("org_id", ctx.org_id).eq("project_id", project_id)\
               .gte("created_at", start.isoformat()).execute().data or []
    except Exception:
        rows = []
    buckets = {}
    for r in rows:
        d = (r.get("created_at") or "")[:10]
        if not d: continue
        buckets.setdefault(d, []).append(float(r.get("score") or 0))
    out = []
    for i in range(30):
        day = (start + timedelta(days=i)).isoformat()
        arr = buckets.get(day) or []
        avg = round(sum(arr)/len(arr), 2) if arr else None
        out.append({"date": day, "avg": avg, "count": len(arr)})
    return {"items": out}


Mount in server/main.py:

from .routers import wellness_rollup
app.include_router(wellness_rollup.router)

3B) Admin panel chart

client/src/components/AdminWellness.tsx (new)

import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getJSON } from "@/lib/authFetch";
import { downloadGET } from "@/lib/download";

export default function AdminWellness(){
  const { projectId } = useParams();
  const [data,setData]=useState<{date:string;avg:number|null;count:number}[]>([]);
  useEffect(()=>{ (async()=>{ try{
    const d = await getJSON(`/api/wellness/rollup?project_id=${projectId}`);
    setData(d.items||[]);
  }catch{ setData([]); } })(); },[projectId]);

  return (
    <div className="brand-card p-3">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm font-medium">Wellness — Last 30 Days</div>
        <button className="brand-btn text-xs" onClick={()=>downloadGET(`/api/wellness/export.csv?project_id=${projectId}`, "wellness.csv")}>
          Export CSV
        </button>
      </div>
      <div className="h-[120px] flex items-end gap-1">
        {data.map((d,i)=>(
          <div key={i} title={`${d.date} • ${d.avg ?? "—"} (${d.count})`}
            style={{
              height: `${((d.avg ?? 0)/5)*110}px`, width: '7px',
              background: d.avg==null ? 'rgba(255,255,255,.08)' : 'var(--brand-accent)'
            }}/>
        ))}
      </div>
      <div className="text-xs text-muted-foreground mt-2">Hover bars for date/avg/check-ins.</div>
    </div>
  );
}


Add it to Admin Health (or Ops) page:

In client/src/pages/AdminHealthDashboard.jsx/tsx:

import AdminWellness from "@/components/AdminWellness";
// ...
<div className="grid md:grid-cols-2 gap-3">
  {/* existing health cards */}
  <AdminWellness />
</div>

4) KPI Delta Badge (small +/- next to CountUp)

client/src/components/DeltaBadge.tsx (new)

import { useEffect, useRef, useState } from "react";
export default function DeltaBadge({ value }:{ value:number }){
  const prev = useRef<number>(value);
  const [delta,setDelta]=useState<number>(0);
  useEffect(()=>{
    const d = value - prev.current;
    setDelta(d);
    prev.current = value;
    const t = setTimeout(()=>setDelta(0), 1200);
    return ()=>clearTimeout(t);
  },[value]);
  if (delta===0) return null;
  const pos = delta>0;
  return (
    <span className={`text-[11px] ml-1 ${pos?'text-[var(--brand-good)]':'text-red-400'}`}>
      {pos?`+${delta}`:delta}
    </span>
  );
}


Patch client/src/pages/DashboardV2.tsx: use it beside CountUp:

import DeltaBadge from "@/components/DeltaBadge";
// ...
const docs = Number(sum?.docs||0);
// ...
k("Documents", <><CountUp to={docs}/><DeltaBadge value={docs}/></>, undefined, "primary")


Repeat for actions/risks/decisions/overdue as desired.

5) 60-second sanity

Header now has a Project Switcher (persists + navigates instantly).

Data Room ZIP contains manifest.html with your brand header.

Admin Health shows Wellness 30-day chart + CSV export.

KPIs display a small delta badge on change (with your CountUp glow).