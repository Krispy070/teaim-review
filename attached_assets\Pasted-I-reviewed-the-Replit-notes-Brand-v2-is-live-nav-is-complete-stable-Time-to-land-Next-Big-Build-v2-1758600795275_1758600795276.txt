I reviewed the Replit notes—Brand v2 is live, nav is complete/stable. Time to land Next Big Build v2.7.2: header-grade breadcrumbs, smarter timeline actions, digest deltas, and wellness admin filters. Copy-paste these patches as-is.

1) Header breadcrumbs (project-aware)
1A) Header breadcrumbs component

client/src/components/HeaderCrumbs.tsx (new)

import { NavLink, useLocation, useParams } from "react-router-dom";

const labelMap: Record<string,string> = {
  dashboard: "Dashboard",
  timeline: "Timeline",
  documents: "Documents",
  meetings: "Meeting Summaries",
  "actions/kanban": "Actions Kanban",
  "actions/list": "Actions",
  stages: "Stage Sign-Off",
  "stages/manage": "Stages",
  "stages/wizard": "Stage Wizard",
  "signoff/compose": "Compose Sign-Off Package",
  "signoff/docs": "Sign-Off Docs",
  integrations: "Integrations & Tech",
  reporting: "Data & Reporting",
  wellness: "Team Wellness",
  financials: "Financials",
  "updates/review": "PM Update Monitor",
  "admin/ops": "System Health",
  "admin/method": "Method Insights",
  "admin/audit-timeline": "Audit Timeline",
  "admin/projects": "Projects Admin",
  "admin/members": "Members",
  "admin/team-access": "Team Management",
  "admin/invite": "Invite",
  "admin/integrations": "Integrations Tracker",
  "admin/backups": "Admin Backups",
  "admin/rls-selftest": "RLS Self-Test",
  "admin/qa-tools": "QA Tools",
  "admin/smoke-run": "Smoke Runner",
  "admin/comms": "Email Center",
};

function findLabel(pathname: string): string {
  // strip /projects/:id/
  const m = pathname.match(/\/projects\/[^/]+\/(.+)/);
  const key = m ? m[1] : "";
  // try exact, then trim segments
  if (labelMap[key]) return labelMap[key];
  const parts = key.split("/");
  while (parts.length) {
    const k = parts.join("/");
    if (labelMap[k]) return labelMap[k];
    parts.pop();
  }
  return "Overview";
}

export default function HeaderCrumbs({ projectLabel }:{ projectLabel?: string }){
  const loc = useLocation();
  const { projectId } = useParams();
  const page = findLabel(loc.pathname);

  return (
    <div className="text-xs text-muted-foreground flex items-center gap-1">
      <NavLink to={`/projects/${projectId}/dashboard`} className="underline">Project {projectLabel || (projectId?.slice(0,8) || "")}</NavLink>
      <span>›</span>
      <span>{page}</span>
    </div>
  );
}

1B) Use it in the BrandedHeader center zone

client/src/components/BrandedHeader.tsx (replace the middle text block)

import HeaderCrumbs from "@/components/HeaderCrumbs";
// ...
{/* center text */}
<div className="hidden md:block">
  <HeaderCrumbs projectLabel={b.customer_name || b.vendor_name || ""} />
</div>


Now the header shows “Project ACME › Timeline”, etc., on every screen.

2) Timeline hover & quick request sign-off
2A) Best-guess stage owner by area (backend)

We’ll infer a stage owner from actions in the same area (most frequent owner). Dev-safe fallback.

server/routers/stages_owners.py (new)

from fastapi import APIRouter, Depends, Query
from collections import Counter
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/stages", tags=["stages"])

@router.get("/owners_by_area")
def owners_by_area(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    try:
        rows = sb.table("actions").select("owner,area")\
               .eq("org_id", ctx.org_id).eq("project_id", project_id).execute().data or []
        mapc = {}
        by_area = {}
        for r in rows:
            a = (r.get("area") or "").strip()
            o = (r.get("owner") or "").strip()
            if not a or not o: continue
            by_area.setdefault(a, []).append(o)
        for a, owners in by_area.items():
            c = Counter(owners); mapc[a] = c.most_common(1)[0][0] if owners else None
        return {"owner_by_area": mapc}
    except Exception:
        return {"owner_by_area": {}}


Mount in server/main.py:

from .routers import stages_owners
app.include_router(stages_owners.router)

2B) Timeline hover card + prefilled email

Patch client/src/components/PhaseTimeline.tsx:

Add owners fetch:

const [ownerByArea,setOwnerByArea] = useState<Record<string,string>>({});
useEffect(()=>{ (async()=>{
  try{
    const d = await getJSON<{owner_by_area:Record<string,string>}>(`/api/stages/owners_by_area?project_id=${projectId}`);
    setOwnerByArea(d.owner_by_area || {});
  }catch{ setOwnerByArea({}); }
})(); },[projectId]);


Replace the simple title tooltip with a small hover card:

Add local tooltip state near top:

const [hover,setHover]=useState<{x:number;y:number;content:string}|null>(null);


In each stage bar:

const ownerGuess = s.area ? ownerByArea[s.area] : "";
const tipHtml = `${s.title}${s.area?` • ${s.area}`:""}<br/>${sStr} → ${eStr}${ownerGuess?`<br/>Owner: ${ownerGuess}`:""}`;

return (
  <div key={s.id} className="mb-3" onMouseLeave={()=>setHover(null)}>
    {/* row title ... */}
    <div
      className="relative h-2 bg-white/10 rounded cursor-pointer"
      onMouseMove={(e)=> setHover({ x:e.clientX+10, y:e.clientY+10, content: tipHtml })}
      onClick={gotoStage}
    >
      <div className="absolute h-2 rounded" style={{ left:`${pctStart}%`, width:`${pctW}%`, background: col, boxShadow: glow }} />
      {signedNow && <div className="absolute -top-4" style={{ left:`calc(${pctStart}% + ${pctW/2}%)`}}><span style={{fontSize:'10px',color:'var(--brand-good)'}}>✔</span></div>}
    </div>
    <div className="mt-1 flex justify-end">
      <button className="brand-btn text-[11px] swoosh"
        onClick={async (e)=>{ e.stopPropagation();
          const email = prompt("Send sign-off request to:", ownerGuess || "");
          if (!email) return;
          try{
            await fetch(`/api/stages/request_signoff?project_id=${projectId}`, {
              method:"POST", credentials:"include",
              headers:{'Content-Type':'application/json'},
              body: JSON.stringify({ stage_id: s.id, email_to: email, title: s.title, area: s.area })
            });
            alert("Request sent");
          }catch(e:any){ alert(String(e?.message||e)); }
        }}
      >Request Sign-Off</button>
    </div>
  </div>
);


Render a hover card near the bottom of the component:

{hover && (
  <div style={{ position:'fixed', left:hover.x, top:hover.y, zIndex:99, pointerEvents:'none',
                background:'rgba(0,0,0,.8)', color:'#fff', padding:'6px 8px', borderRadius:6, fontSize:12, maxWidth:240 }}
       dangerouslySetInnerHTML={{__html: hover.content}} />
)}


This gives a crisp hover with owner prefill; dev-safe if owners aren’t found.

3) Digest send — per-user deltas in email

Patch server/routers/digest.py (inside /send-weekly loop, after you compute counts and html)
Add “previous counts by recipient email” using your comms_send_log (dev-safe if missing):

# compute deltas using last send log (if schema has to_email/details)
prev = {}
try:
    prevlog = sb.table("comms_send_log").select("details,created_at")\
               .eq("org_id", ctx.org_id).eq("project_id", project_id)\
               .eq("kind","digest").eq("to_email", email)\
               .order("created_at", desc=True).limit(1).execute().data
    if prevlog and prevlog[0].get("details"):
        prev = prevlog[0]["details"].get("counts") or {}
except Exception:
    prev = {}

def sign(x): 
    try:
        d = (counts.get(x,0) or 0) - (int(prev.get(x,0) or 0))
        return f" (+{d})" if d>0 else (f" ({d})" if d<0 else "")
    except Exception:
        return ""

# build personalized HTML with deltas
html = export_header_html(sb.table("org_branding").select("*").eq("org_id", ctx.org_id).single().execute().data or {}, code)
html += "<h2>Weekly Digest</h2>"
if "actions" in wanted:   html += f"<div>Actions: <b>{counts.get('actions',0)}</b>{sign('actions')}</div>"
if "risks" in wanted:     html += f"<div>Risks: <b>{counts.get('risks',0)}</b>{sign('risks')}</div>"
if "decisions" in wanted: html += f"<div>Decisions: <b>{counts.get('decisions',0)}</b>{sign('decisions')}</div>"

# ...send_guard + mailgun_send_html...

# after send succeeds, log this recipient's personalized counts
try:
    sb.table("comms_send_log").insert({
        "org_id": ctx.org_id, "project_id": project_id, "actor_id": ctx.user_id,
        "kind": "digest", "period_key": period_key, "to_email": email,
        "details": {"counts": counts, "topics": list(wanted)},
        "created_at": _now_local if '_now_local' in locals() else None
    }).execute()
except Exception: ...


If to_email doesn’t exist in your table, this will simply try and fail silently (dev-safe).

4) Wellness admin filters: filter by user + top responders
4A) Backend: rollup filter + top responders

Patch server/routers/wellness_rollup.py:

Accept user_id:

@router.get("/rollup")
def rollup(project_id: str = Query(...), user_id: str | None = None,
           ctx: TenantCtx = Depends(require_role({"owner","admin","pm"}))):
    # ...
    try:
        q = sb.table("team_wellness").select("created_at,user_id,score")\
               .eq("org_id", ctx.org_id).eq("project_id", project_id).gte("created_at", start.isoformat())
        if user_id: q = q.eq("user_id", user_id)
        rows = q.execute().data or []


Add top responders endpoint:

@router.get("/top_responders")
def top_responders(project_id: str = Query(...),
                   ctx: TenantCtx = Depends(require_role({"owner","admin","pm"}))):
    sb = get_user_supabase(ctx)
    try:
        end = datetime.now(timezone.utc).date()
        start = end - timedelta(days=29)
        rows = sb.table("team_wellness").select("user_id,score")\
               .eq("org_id", ctx.org_id).eq("project_id", project_id)\
               .gte("created_at", start.isoformat()).execute().data or []
        count: dict[str,int] = {}
        for r in rows:
            uid = r.get("user_id"); 
            if not uid: continue
            count[uid] = count.get(uid, 0) + 1
        # top 10
        top = sorted(count.items(), key=lambda x: x[1], reverse=True)[:10]
        return {"items": [{"user_id": u, "checkins": c} for (u,c) in top]}
    except Exception:
        return {"items": []}

4B) Frontend: filter & top list

Patch client/src/components/AdminWellness.tsx:

Add user filter (fetch members list):

import { getJSON } from "@/lib/authFetch";
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { downloadGET } from "@/lib/download";

type Member = { user_id:string; role?:string; email?:string };

export default function AdminWellness(){
  const { projectId } = useParams();
  const [data,setData]=useState<{date:string;avg:number|null;count:number}[]>([]);
  const [members,setMembers]=useState<Member[]>([]);
  const [selected,setSelected]=useState<string>("");

  async function load(){
    const d = await getJSON(`/api/wellness/rollup?project_id=${projectId}${selected?`&user_id=${encodeURIComponent(selected)}`:""}`);
    setData(d.items||[]);
  }

  useEffect(()=>{ (async()=>{
    try{
      const m = await getJSON(`/api/members/list?project_id=${projectId}`);
      setMembers((m.members||[]).map((x:any)=>({ user_id:x.user_id, role:x.role, email:x.email || x.user_id })));
    }catch{ setMembers([]); }
    load();
  })(); // eslint-disable-next-line
  },[projectId, selected]);

  const [top,setTop]=useState<{user_id:string;checkins:number}[]>([]);
  useEffect(()=>{ (async()=>{
    try{ const t = await getJSON(`/api/wellness/top_responders?project_id=${projectId}`); setTop(t.items||[]); }catch{ setTop([]); }
  })(); },[projectId]);

  return (
    <div className="brand-card p-3">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm font-medium">Wellness — Last 30 Days</div>
        <div className="flex items-center gap-2">
          <select className="brand-btn text-xs" value={selected} onChange={e=>setSelected(e.target.value)}>
            <option value="">All Users</option>
            {members.map(m=><option key={m.user_id} value={m.user_id}>{m.email || m.user_id}</option>)}
          </select>
          <button className="brand-btn text-xs" onClick={()=>downloadGET(`/api/wellness/export.csv?project_id=${projectId}`, "wellness.csv")}>
            Export CSV
          </button>
        </div>
      </div>
      <div className="h-[120px] flex items-end gap-1">
        {data.map((d,i)=>(
          <div key={i} title={`${d.date} • ${d.avg ?? "—"} (${d.count})`}
            style={{ height: `${((d.avg ?? 0)/5)*110}px`, width: '7px',
                     background: d.avg==null ? 'rgba(255,255,255,.08)' : 'var(--brand-accent)' }}/>
        ))}
      </div>
      <div className="text-xs text-muted-foreground mt-2">Hover bars for date/avg/check-ins.</div>
      <div className="mt-3">
        <div className="text-xs font-medium mb-1">Top Responders</div>
        <div className="grid md:grid-cols-2 gap-2">
          {(top||[]).map(t=>(
            <div key={t.user_id} className="text-xs flex justify-between">
              <span>{(members.find(m=>m.user_id===t.user_id)?.email) || t.user_id}</span>
              <span>{t.checkins}</span>
            </div>
          ))}
          {!top.length && <div className="text-xs text-muted-foreground">No data.</div>}
        </div>
      </div>
    </div>
  );
}

5) 60-second validation

Timeline shows ✔ for signed stages; “At risk” no longer counts signed stages.

Hovering a stage shows owner guess; Request Sign-Off prefilled; click → email prompt.

CSV bundle export downloads zip with manifest.html (branded).

Digest emails now show (+/– deltas) per section for each recipient.

Wellness Admin filters by user; shows Top Responders.