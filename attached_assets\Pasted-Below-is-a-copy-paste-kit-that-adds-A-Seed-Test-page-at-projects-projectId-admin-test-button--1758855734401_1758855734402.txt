Below is a copy-paste kit that adds:

A Seed + Test page at /projects/:projectId/admin/test (button does it all).

A tiny backend seed endpoint (adds sample workbooks/reports/CRs/comments).

Clear expected impacts + a couple of negative checks (built into the test).

If you still want a CLI later, we can wire npm run test:full, but you don’t need it for staging validation.

~99.99% complete — Staging Test Kit (copy-paste)
0) Staging switch (quick checklist)

Set Replit Secrets:

APP_BASE_URL=https://<your-replit-or-staging-url>
NODE_ENV=production
DEV_AUTH=0          # turns off X-Dev headers
SUPABASE_URL=…
SUPABASE_ANON_KEY=…
SUPABASE_SERVICE_ROLE_KEY=…
MAILGUN_DOMAIN=…
MAILGUN_API_KEY=…
VITE_BRAND_V2=1


If you previously forwarded X-Dev-* headers in the Node→FastAPI proxy, keep the gating: only forward when DEV_AUTH=1. With DEV_AUTH=0, do not forward them.

1) Backend: seed endpoint (adds sample data, dev-safe)

server/routers/admin_seed.py (new)

from fastapi import APIRouter, Depends, Query
from datetime import datetime, timezone, timedelta
from ..tenant import TenantCtx
from ..guards import require_role
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/admin", tags=["admin"])
PM_PLUS = require_role({"owner","admin","pm"})

@router.post("/seed_basic")
def seed_basic(project_id: str = Query(...), ctx: TenantCtx = Depends(PM_PLUS)):
    sb = get_user_supabase(ctx)
    inserted = {"workbooks":0, "reports":0, "changes":0, "comments":0}
    try:
        today = datetime.now(timezone.utc).date()
        # Workbooks
        wbs = [
            {"name":"Employee Core Load","area":"HCM","asof_date":str(today),"due_date":str(today+timedelta(days=25)),"iterations_planned":3,"status":"in_progress","notes":"Core worker data"},
            {"name":"Absence Entitlements","area":"Absence","asof_date":str(today),"due_date":str(today+timedelta(days=10)),"iterations_planned":2,"status":"in_progress"},
            {"name":"Supplier Master","area":"Financials","asof_date":str(today),"due_date":str(today+timedelta(days=40)),"iterations_planned":2,"status":"planned"}
        ]
        for w in wbs:
            w.update({"org_id": ctx.org_id, "project_id": project_id})
            try: sb.table("workbooks").insert(w).execute(); inserted["workbooks"]+=1
            except Exception: ...
        # Reports
        rps = [
            {"name":"Headcount by Cost Center","legacy_system":"PeopleSoft","owner":"owner@client.com","frequency":"monthly","due_date":str(today+timedelta(days=15)),"status":"planned","wd_type":"delivered","wd_report_name":"Standard Headcount"},
            {"name":"Overtime by Week","legacy_system":"ADP","owner":"lead@partner.com","frequency":"weekly","due_date":str(today+timedelta(days=7)),"status":"mapped","wd_type":"custom","wd_report_name":"OT by Week"}
        ]
        for r in rps:
            r.update({"org_id": ctx.org_id, "project_id": project_id})
            try: sb.table("reports").insert(r).execute(); inserted["reports"]+=1
            except Exception: ...
        # Change Requests
        crs = [
            {"title":"Add Cost Center to Timesheet","area":"Time Tracking","priority":"high","risk":"medium","status":"in_progress","assignee":"lead@partner.com","due_date":str(today+timedelta(days=5))},
            {"title":"Payroll Retro Rule","area":"Payroll","priority":"urgent","risk":"high","status":"triage","assignee":"payroll@client.com","due_date":str(today+timedelta(days=2))}
        ]
        for c in crs:
            c.update({"org_id": ctx.org_id, "project_id": project_id})
            try: sb.table("changes").insert(c).execute(); inserted["changes"]+=1
            except Exception: ...
        # Area comments (for Guides/updates)
        cms = [
            {"area":"HCM","message":"How to update legal name in WD: Worker→Personal→Edit #guide"},
            {"area":"Payroll","message":"Retro rule discussion — pending approval"}
        ]
        for m in cms:
            m.update({"org_id": ctx.org_id, "project_id": project_id, "user_id": ctx.user_id})
            try: sb.table("area_comments").insert(m).execute(); inserted["comments"]+=1
            except Exception: ...
        return {"ok": True, "inserted": inserted}
    except Exception:
        return {"ok": False, "inserted": inserted}


Mount in server/main.py:

from .routers import admin_seed
app.include_router(admin_seed.router)

2) Frontend: one-click Seed + Test page

client/src/pages/TestRunner.tsx (new)

import { useState } from "react";
import { useParams } from "react-router-dom";

type T = { name:string; run:()=>Promise<void>; result?:'ok'|'fail'; detail?:string };

export default function TestRunner(){
  const { projectId } = useParams();
  const [running,setRunning]=useState(false);
  const [log,setLog]=useState<string[]>([]);
  const [results,setResults]=useState<T[]>([]);

  function addLog(s:string){ setLog(l=>[...l, s]); }

  async function seed(){
    addLog("Seeding sample data…");
    const r = await fetch(`/api/admin/seed_basic?project_id=${projectId}`, { method:"POST", credentials:"include" });
    const d = await r.json().catch(()=>({ok:false}));
    addLog(JSON.stringify(d));
    if(!d?.ok) throw new Error("Seed failed");
  }

  const tests: T[] = [
    { name: "Areas summary_all", run: async()=> { const r=await fetch(`/api/areas/summary_all?project_id=${projectId}`,{credentials:"include"}); if(!r.ok) throw new Error("areas summary"); }},
    { name: "Workbooks metrics", run: async()=> { const r=await fetch(`/api/workbooks/metrics?project_id=${projectId}`,{credentials:"include"}); if(!r.ok) throw new Error("wb metrics"); }},
    { name: "Workbooks export CSV", run: async()=> { const r=await fetch(`/api/workbooks/export.csv?project_id=${projectId}`,{credentials:"include"}); if(!r.ok) throw new Error("wb export"); }},
    { name: "Digest preview HTML", run: async()=> { const r=await fetch(`/api/digest/preview_html?project_id=${projectId}`,{credentials:"include"}); if(!r.ok) throw new Error("digest preview"); }},
    { name: "Area export ZIP (HCM)", run: async()=> { const r=await fetch(`/api/area/export.zip?project_id=${projectId}&area=HCM`,{credentials:"include"}); if(!r.ok) throw new Error("area zip"); }},
    { name: "Notifications unseen count", run: async()=> { const r=await fetch(`/api/notify/unseen_count?project_id=${projectId}`,{credentials:"include"}); if(!r.ok) throw new Error("notify count"); }},
    { name: "Releases ICS", run: async()=> { const now=new Date(); const y=now.getFullYear(); const m=String(now.getMonth()+1).padStart(2,'0'); const r=await fetch(`/api/releases/month.ics?project_id=${projectId}&year=${y}&month=${m}`,{credentials:"include"}); if(!r.ok) throw new Error("ICS"); }},
    // Negative: invalid signoff token shows 404/invalid page (public path)
    { name: "Sign-off invalid token (negative)", run: async()=> {
      const r=await fetch(`/signoff/doc/invalid-token`,{credentials:"include"});
      if (r.status===200){ const html=await r.text(); if(!/Invalid Token|Not Found|invalid/i.test(html)) throw new Error("expected invalid"); }
    }},
  ];

  async function runAll(){
    setRunning(true); setResults([]); setLog([]);
    try {
      await seed();
      const rs:T[]=[];
      for (const t of tests){
        try { await t.run(); rs.push({...t, result:'ok'}); addLog(`✅ ${t.name}`); }
        catch(e:any){ rs.push({...t, result:'fail', detail: e?.message || String(e)}); addLog(`❌ ${t.name}: ${e?.message||e}`); }
      }
      setResults(rs);
    } finally { setRunning(false); }
  }

  const okCount = results.filter(r=>r.result==='ok').length;

  return (
    <div className="brand-card p-3 space-y-2">
      <div className="flex items-center justify-between">
        <div className="text-sm font-medium">Staging Test Runner</div>
        <button className="brand-btn text-xs" onClick={runAll} disabled={running}>Seed & Run</button>
      </div>
      <div className="text-xs text-muted-foreground">Project: {projectId}</div>
      <div className="text-xs">
        {results.map((r,i)=> <div key={i} className={r.result==='ok'?'text-emerald-600':'text-red-500'}>{r.result==='ok'?'✅':'❌'} {r.name}{r.detail?`: ${r.detail}`:''}</div>)}
        {!results.length && <div className="text-muted-foreground">Click “Seed & Run”.</div>}
      </div>
      <div className="text-xs">
        {results.length? <>Passed: {okCount}/{results.length}</> : null}
      </div>
      <div className="text-[11px] whitespace-pre-wrap bg-white/5 p-2 rounded border">
        {log.join("\n")}
      </div>
    </div>
  );
}


Route in client/src/App.jsx:

import TestRunner from "@/pages/TestRunner";
// …
<Route path="/projects/:projectId/admin/test" element={<TestRunner/>} />


Add a Governance/Tools link to this page in your sidebar or header.