Here’s Next Big Build v2.10 (two sprints packed in one), copy-paste ready:

Owner-aware “Request Sign-Off” modal (members filtered by signer authority; no more prompt())

Stage Editor superpowers (focus, keyboard save/undo, unsaved highlight)

Digest “Closed since last week” (per-recipient; dev-safe)

One-click CSV exports (Actions/Risks/Decisions) with branded companion HTML

Top progress bar on route change (snappy feel)

Command Palette A11y (focus trap + arrow nav)

Everything is Brand v2–aware and dev-safe (falls back gracefully).

1) Owner-aware Request Sign-Off (modal + backend)
1A) Backend: list eligible signers by area

server/routers/members_signers.py (new)

from fastapi import APIRouter, Depends, Query
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase

router = APIRouter(prefix="/api/members", tags=["members"])

@router.get("/signers")
def signers(project_id: str = Query(...), area: str | None = None,
            ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    try:
        rows = sb.table("project_member_access").select("user_id,can_sign_all,sign_areas")\
               .eq("org_id", ctx.org_id).eq("project_id", project_id).execute().data or []
        # resolve emails
        em = {}
        try:
            prof = sb.table("users_profile").select("user_id,email").execute().data or []
            em = {p["user_id"]: p.get("email") for p in prof if p.get("user_id")}
        except Exception:
            pass
        out=[]
        for r in rows:
            if r.get("can_sign_all"):
                out.append({"user_id": r["user_id"], "email": em.get(r["user_id"], r["user_id"])})
                continue
            if area and (area in (r.get("sign_areas") or [])):
                out.append({"user_id": r["user_id"], "email": em.get(r["user_id"], r["user_id"])})
        return {"items": out}
    except Exception:
        return {"items": []}


Mount in server/main.py:

from .routers import members_signers
app.include_router(members_signers.router)

1B) Frontend: Sign-off Request Modal

client/src/components/SignoffRequestModal.tsx (new)

import { useEffect, useState } from "react";
import { getJSON } from "@/lib/authFetch";

export default function SignoffRequestModal({
  projectId, stageId, stageTitle, stageArea, onClose
}:{
  projectId: string; stageId: string; stageTitle?: string; stageArea?: string; onClose: ()=>void
}){
  const [signers,setSigners]=useState<{user_id:string; email:string}[]>([]);
  const [email,setEmail]=useState("");
  const [busy,setBusy]=useState(false);

  useEffect(()=>{ (async()=>{
    try{
      const d = await getJSON(`/api/members/signers?project_id=${projectId}${stageArea?`&area=${encodeURIComponent(stageArea)}`:""}`);
      setSigners(d.items||[]);
      if (d.items?.[0]?.email) setEmail(d.items[0].email);
    }catch{ setSigners([]); }
  })(); },[projectId, stageArea]);

  async function send(){
    if (!email.trim()) return alert("Pick a recipient");
    setBusy(true);
    try{
      await fetch(`/api/stages/request_signoff?project_id=${projectId}`, {
        method:"POST", credentials:"include",
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ stage_id: stageId, email_to: email.trim(), title: stageTitle, area: stageArea })
      });
      onClose();
      alert("Request sent");
    }catch(e:any){
      alert(String(e?.message||e));
      setBusy(false);
    }
  }

  return (
    <div className="fixed inset-0 bg-black/40 z-[200]" onClick={onClose}>
      <div className="mx-auto mt-[10vh] w-[520px] max-w-[95%] bg-white dark:bg-neutral-900 rounded shadow-xl border"
           onClick={e=>e.stopPropagation()}>
        <div className="p-3 border-b">
          <div className="text-sm font-medium">Request Sign-Off</div>
          <div className="text-xs text-muted-foreground">{stageTitle}{stageArea?` • ${stageArea}`:""}</div>
        </div>
        <div className="p-3 space-y-2">
          <div className="text-xs">Recipient</div>
          <select className="border rounded p-2 w-full text-sm" value={email} onChange={e=>setEmail(e.target.value)}>
            <option value="">Pick recipient…</option>
            {signers.map(s=> <option key={s.user_id} value={s.email}>{s.email}</option>)}
          </select>
        </div>
        <div className="p-3 border-t flex justify-end gap-2">
          <button className="brand-btn text-xs" onClick={onClose}>Cancel</button>
          <button className="brand-btn text-xs swoosh" onClick={send} disabled={busy}>{busy?"Sending…":"Send"}</button>
        </div>
      </div>
    </div>
  );
}


Integrate into your timeline component (where you used prompt()):

import SignoffRequestModal from "@/components/SignoffRequestModal";
// ...
const [req,setReq]=useState<{id:string;title?:string;area?:string}|null>(null);
// ...
<div className="mt-1 flex justify-end">
  <button className="brand-btn text-[11px] swoosh" onClick={(e)=>{ e.stopPropagation(); setReq({id:s.id, title:s.title, area:s.area}); }}>
    Request Sign-Off
  </button>
</div>
{req && <SignoffRequestModal projectId={projectId} stageId={req.id} stageTitle={req.title} stageArea={req.area} onClose={()=>setReq(null)} />}

2) Stage Editor superpowers (focus / keyboard / unsaved)

Patch client/src/pages/Stages.tsx (augment your inputs)

Add unsaved flag:

const [dirty, setDirty] = useState<Record<string,boolean>>({});


Wrap your debounced update to mark dirty → saved:

function markDirty(id:string){ setDirty(d => ({...d, [id]: true})); }
async function saveField(id:string, patch:any){
  // your existing upsert/update call…
  await postJSON(`/api/stages/update?stage_id=${id}&project_id=${projectId}`, patch);
  setDirty(d => ({...d, [id]: false}));
}
const saveDebounced = debounced(saveField, 400);


On inputs:

<input
  ref={s.id===focusId ? inputRef : undefined}
  className={`border rounded p-2 ${dirty[s.id] ? 'ring-1 ring-[var(--brand-accent)]' : ''}`}
  defaultValue={s.title}
  onChange={(e)=>{ markDirty(s.id); saveDebounced(s.id,{title:e.target.value}); }}
  onKeyDown={(e)=>{
    if (e.key==="Enter"){ e.preventDefault(); saveField(s.id,{title:(e.target as HTMLInputElement).value}); }
    if (e.key==="Escape"){ (e.target as HTMLInputElement).value = s.title; setDirty(d=>({...d,[s.id]:false})); }
  }}
/>


Repeat for area/start/end fields (adjust patch names accordingly).

3) Digest “Closed since last week”

Patch server/routers/digest.py (send-weekly; after computing last_send):

def closed_since_last_send(table, status_field="status"):
    if not last_send: return []
    try:
        q = sb.table(table).select("id,title,created_at,"+status_field)\
             .eq("org_id", ctx.org_id).eq("project_id", project_id)\
             .eq(status_field, "done").gte("created_at", last_send)\
             .order("created_at", desc=True).limit(50)
        return q.execute().data or []
    except Exception:
        return []

cl_actions = closed_since_last_send("actions")
cl_risks   = closed_since_last_send("risks", status_field="status")  # adjust if your risks use different field
cl_decis   = []  # decisions might not have 'done'; keep empty or add your business rule

def listify_closed(title, arr):
    if not arr: return ""
    items = "".join([f"<li>{(a.get('title') or a.get('id'))} <span style='color:#666;font-size:12px'>closed {a.get('created_at')}</span></li>" for a in arr])
    return f"<h3>Closed since last week — {title}</h3><ul>{items}</ul>"

html += listify_closed("Actions", cl_actions)
html += listify_closed("Risks", cl_risks)
html += listify_closed("Decisions", cl_decis)


Dev-safe: if the table/field doesn’t exist, section will be empty; still sends.

4) One-click CSV exports (single endpoints + branded companion)

server/routers/export_entities.py (new)

from fastapi import APIRouter, Depends, Query
from fastapi.responses import StreamingResponse
import io, csv
from ..tenant import TenantCtx
from ..guards import member_ctx
from ..deps import get_user_supabase
from ..brand.companion import branded_companion_html

router = APIRouter(prefix="/api/export", tags=["export"])

def fetch(sb, org_id, project_id, table, cols):
    try:
        return sb.table(table).select(",".join(cols))\
                 .eq("org_id", org_id).eq("project_id", project_id)\
                 .order("created_at", desc=True).limit(5000).execute().data or []
    except Exception:
        return []

def stream_csv(rows, cols, name):
    s = io.StringIO(); w = csv.writer(s)
    w.writerow(cols)
    for r in rows: w.writerow([r.get(c) for c in cols])
    s.seek(0)
    return StreamingResponse(iter([s.read()]), media_type="text/csv",
        headers={"Content-Disposition": f'attachment; filename="{name}"'})

@router.get("/actions.csv")
def actions_csv(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    cols = ["id","title","owner","status","area","created_at"]
    rows = fetch(sb, ctx.org_id, project_id, "actions", cols)
    return stream_csv(rows, cols, "actions.csv")

@router.get("/risks.csv")
def risks_csv(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx); cols = ["id","title","severity","owner","area","created_at"]
    rows = fetch(sb, ctx.org_id, project_id, "risks", cols)
    return stream_csv(rows, cols, "risks.csv")

@router.get("/decisions.csv")
def decisions_csv(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx); cols = ["id","title","decided_by","area","created_at"]
    rows = fetch(sb, ctx.org_id, project_id, "decisions", cols)
    return stream_csv(rows, cols, "decisions.csv")

@router.get("/actions_companion.html")
def actions_comp(project_id: str = Query(...), ctx: TenantCtx = Depends(member_ctx)):
    sb = get_user_supabase(ctx)
    cols = ["id","title","owner","status","area","created_at"]
    rows = fetch(sb, ctx.org_id, project_id, "actions", cols)
    proj = sb.table("projects").select("code").eq("id", project_id).single().execute().data or {}
    org = sb.table("org_branding").select("*").eq("org_id", ctx.org_id).single().execute().data or {}
    html = branded_companion_html(org, proj.get("code") or project_id, "Actions", rows, cols)
    return StreamingResponse(iter([html]), media_type="text/html")


Mount in server/main.py:

from .routers import export_entities
app.include_router(export_entities.router)


UI — Add quick buttons (e.g., on Reporting page):

<button className="brand-btn text-xs swoosh" onClick={()=>downloadGET(`/api/export/actions.csv?project_id=${projectId}`, "actions.csv")}>Actions CSV</button>
<a className="brand-btn text-xs" href={`/api/export/actions_companion.html?project_id=${projectId}`} target="_blank" rel="noreferrer">Actions Companion</a>

5) Top progress bar on route change

client/src/components/TopProgressBar.tsx (new)

import { useEffect, useRef } from "react";
import { useLocation } from "react-router-dom";

export default function TopProgressBar(){
  const loc = useLocation();
  const ref = useRef<HTMLDivElement|null>(null);

  useEffect(()=>{
    const el = ref.current; if (!el) return;
    el.style.width = "0%"; el.style.opacity = "1";
    let w = 0; const t = setInterval(()=>{ w = Math.min(90, w + 10); el.style.width = w + "%"; }, 120);
    const done = ()=>{
      clearInterval(t); el.style.width = "100%";
      setTimeout(()=>{ el.style.opacity = "0"; el.style.width = "0%"; }, 180);
    };
    // cheap route settle
    const s = setTimeout(done, 900);
    return ()=>{ clearInterval(t); clearTimeout(s); };
  },[loc.key]);

  return (
    <div style={{position:'fixed', left:0, top:0, height:3, width:'0%', background:'var(--brand-accent)', zIndex:200, opacity:0, transition:'width .18s ease, opacity .2s ease'}} ref={ref}/>
  );
}


Add it once (e.g., in AppShell top-level):

import TopProgressBar from "@/components/TopProgressBar";
// ...
<div className={brand ? "app-shell brand-v2" : "app-shell"}>
  <TopProgressBar />
  <div className="app-shell-header">{brand && <BrandedHeader />}</div>
  {/* ... */}
</div>

6) Command Palette A11y

Patch client/src/components/CommandPalette.tsx:

Focus trap and arrow keys:

const [idx,setIdx]=useState(0);
const listRef = useRef<HTMLDivElement|null>(null);

useEffect(()=>{
  function onKey(e: KeyboardEvent){
    if (!open) return;
    if (e.key==="ArrowDown"){ e.preventDefault(); setIdx(i=>Math.min(i+1, hits.length-1)); }
    if (e.key==="ArrowUp"){ e.preventDefault(); setIdx(i=>Math.max(i-1, 0)); }
    if (e.key==="Enter"){ e.preventDefault(); const r=hits[idx]; if (r) go(r); }
  }
  window.addEventListener("keydown", onKey); return ()=>window.removeEventListener("keydown", onKey);
},[open, hits, idx]);


Highlight selected row:

<div className="max-h-[50vh] overflow-auto" ref={listRef}>
  {["Overview","Execution","Planning","Governance","Insights","Admin"].map(g=>(
    <div key={g}>
      <div className="px-2 py-1 text-[11px] uppercase tracking-wider text-gray-400">{g}</div>
      {(hits.filter(h=>h.group===g)).map((r,i)=>{
        const active = hits.indexOf(r)===idx;
        return (
          <button key={r.label}
            className={`w-full text-left px-2 py-1 ${active?'bg-black/10 dark:bg-white/10':''}`}
            onMouseEnter={()=>setIdx(hits.indexOf(r))}
            onClick={()=>go(r)}>
            <div className="text-sm">{r.label}</div>
            <div className="text-xs text-muted-foreground">{r.path.startsWith("/") ? r.path : `/projects/:projectId/${r.path}`}</div>
          </button>
        );
      })}
    </div>
  ))}
</div>


Command Palette now keyboard-friendly and focus-trapped.

7) 2-minute validation

Timeline → Sign-off button opens a modal with signer list; sends email

Stage Editor: clicking a timeline bar → focused row, keyboard save works, unsaved ring clears

Digest shows Closed since last week sections (dev-safe)

Reporting: Actions/Risks/Decisions CSV + branded companion HTML

Route changes show a top progress bar; Command Palette is keyboard-friendly